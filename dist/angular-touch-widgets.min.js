"use strict";function parseTime(t){var e=t.split(":");return{hours:parseInt(e[0]),minutes:parseInt(e[1])}}function regularArcData(t,e,i,r,o,n){var a=0,l=n?0:1,s=a+r*Math.PI/180,c=a+o*Math.PI/180,d=(c-s)%(2*Math.PI)>Math.PI?1:0,u=t+i*Math.cos(s),h=e+i*Math.sin(s),f=t+i*Math.cos(c),g=e+i*Math.sin(c),p=" ",x="";return x+="M"+p+u+p+h+p,x+="A"+p+i+p+i+p+a+p+d+p+l+p+f+p+g}function regularSemiCircle(t,e,i,r,o,n){var a=" ",l=regularArcData(t,e,i,r,o-1e-4,n);return l+="L"+a+t+a+e}function positionOnCircle(t,e,i,r,o,n){var a=0,l=a+r*Math.PI/180,s=parseInt(t+(i+o)*Math.cos(l)),c=parseInt(e+(i+n)*Math.sin(l));return{x:s,y:c}}function parseTime(t){var e=t.split(":");return{hours:parseInt(e[0]),minutes:parseInt(e[1])}}function getAngle(t,e,i,r){var o=(r-e)/(i-t),n=Math.atan(o);return 0>i-t&&(n+=Math.PI),180*n/Math.PI+90}function getModule(t,e,i,r){var o=i-t,n=r-e;return Math.sqrt(o*o+n*n)}!function(t){t.module("angularTouchWidgets.config",["ionic"]).value("angularTouchWidgets.config",{debug:!0}),t.module("angularTouchWidgets.directives",[]),t.module("angularTouchWidgets",["angularTouchWidgets.config","angularTouchWidgets.directives"])}(angular),angular.module("angularTouchWidgets.directives.clockEditor",[]).directive("clockEditor",function(){return{restrict:"E",scope:{from:"=",to:"=",onClick:"&"},replace:!0,template:'<div>                    <svg class="clock-editor" height="200" width="240" ng-click="onClick()">                        <defs>                            <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                            </filter>                        </defs>                        <g filter="url(#shadow-{{$id}})">                            <circle id="test" cx="115" cy="100" r="70" fill="white"></circle>                            <path class="content-selection" ng-attr-d="{{ semiCircle }}"></path>                            <circle id="test" cx="115" cy="100" r="65" stroke="white" fill="transparent" stroke-width="8"></circle>                            <circle id="test" cx="115" cy="100" r="70" stroke="black" fill="transparent" stroke-width="6"></circle>                        </g>                        <text ng-attr-x="{{fromPos.x-20}}" ng-attr-y="{{fromPos.y+7}}" font-size="14">                                {{ from }}                        </text>                        <text ng-attr-x="{{toPos.x-20}}" ng-attr-y="{{toPos.y+7}}" font-size="14">                            {{ to }}                        </text>                    </svg>                </div>',controller:function(t){var e=function(){var e=parseTime(t.from),i=parseTime(t.to),r=-90+(30*e.hours+.5*e.minutes),o=-90+(30*i.hours+.5*i.minutes);t.semiCircle=regularSemiCircle(115,100,70,r,o,!1),t.fromPos=positionOnCircle(115,100,70,r,24,14),t.toPos=positionOnCircle(115,100,70,o,24,14)};e(),t.$watch("from",function(){e()}),t.$watch("to",function(){e()})}}}),angular.module("angularTouchWidgets.directives.colorIntensity",[]).directive("colorIntensity",function(){return{restrict:"E",replace:!0,scope:{intensity:"="},template:'<div class="range range-positive" style="width: 100%">                    <i class="icon ion-ios-sunny-outline"></i>                    <input type="range" name="volume" min="0" max="100" ng-model="intensity">                    <i class="icon ion-ios-sunny"></i>                </div>'}}),angular.module("angularTouchWidgets.directives.colorWheel",[]).directive("colorWheel",function(t){return{restrict:"E",replace:!0,scope:{color:"=",img:"@"},template:'<div style="height: 300px; width: 300px; margin: auto; position: relative;">                    <canvas var="1" width="300" height="300" ng-click="colorClick($event)"></canvas>                    <div ng-style="{\'background-color\': \'rgb(\'+color.r+\',\'+color.g+\',\'+color.b+\')\'}" style="position: absolute; top: 120px; left: 120px; height: 60px; width: 60px; border-radius: 50%; box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.46); transition: background 0.1s; -webkit-transition: background 0.1s"></div>                </div>',link:function(e,i){var r=i.children()[0].getContext("2d"),o=angular.element(i.children()[1]),n=new Image;n.onload=function(){r.drawImage(n,0,0,300,300)},n.src=e.img||"img/color-wheel.png";var a=function(){t.addClass(o,"pulse animated-quick").then(function(){o.removeClass("pulse animated-quick")})};e.colorClick=function(t){var i=r.getImageData(t.offsetX,t.offsetY,1,1).data;0!==i[3]&&(angular.copy({r:i[0],g:i[1],b:i[2]},e.color),a())}}}}),angular.module("angularTouchWidgets.directives",["angularTouchWidgets.directives.modeSelector","angularTouchWidgets.directives.lightEditor","angularTouchWidgets.directives.colorWheel","angularTouchWidgets.directives.colorIntensity","angularTouchWidgets.directives.clockEditor","angularTouchWidgets.directives.minutesEditor","angularTouchWidgets.directives.timePicker","angularTouchWidgets.directives.minutesPicker","angularTouchWidgets.directives.thermometer","angularTouchWidgets.directives.phMeter","angularTouchWidgets.directives.orpMeter","angularTouchWidgets.directives.onOffButton"]),angular.module("angularTouchWidgets.directives.lightEditor",[]).directive("lightEditor",function(){return{restrict:"E",replace:!0,scope:{on:"=",mode:"=",canTurnOff:"=",isRgb:"=",onClick:"&",modeStatic:"=",modeAnimated:"="},template:'  <div class="light-editor" style="position: relative; height: 260px; width: 240px;">                            <svg class="fx-zoom-normal" height="260" width="240" style="position: absolute;" ng-show="(on || !canTurnOff)">                                <defs>                                    <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                        <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                        <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                        <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                        <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                                    </filter>                                </defs>                                <path fill="transparent" stroke-linecap="round" stroke="white" stroke-width="20" d="M 47 195 A 105 105 0 1 1 182 195" filter="url(#shadow-{{$id}})" stroke ng-click="onClick()"></path>                                <path fill="transparent" stroke-linecap="round" stroke="#ccc" stroke-width="2" d="M 47 195 A 105 105 0 1 1 182 195" ng-click="onClick()"></path>                                <path class="line-selection" fill="transparent" stroke-linecap="round" stroke-width="6" ng-attr-d="{{ arc }}" ng-click="onClick()"></path>                            </svg>                            <svg class="show-hide-opacity ng-hide" ng-show="canTurnOff" height="260" width="240" style="position: absolute;">                                <defs>                                    <filter id="button-shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                        <feOffset result="offOut" in="SourceGraphic" dx="1" dy="4"></feOffset>                                        <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                        <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                        <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                                    </filter>                                </defs>                                                                <g ng-click="toggle()">                                    <path class="show-hide-opacity button-on-svg" ng-hide="on" fill="transparent" stroke-width="40" d="M 166 204 A 103 103 0 0 1 63 204" filter="url(#button-shadow-{{$id}})"></path>                                    <path class="show-hide-opacity button-off-svg" ng-show="on" fill="transparent" stroke-width="40" d="M 166 204 A 103 103 0 0 1 63 204" filter="url(#button-shadow-{{$id}})"></path>                                </g>                            </svg>                            <div style="height: 0; position: absolute; top: 41px; left: 39px;">                                <div class="fx-rotate-clock round-button center override button-shadow ng-hide" ng-show="isRgb && (on || !canTurnOff) && mode===\'static\'" ng-style="{\'background-color\': \'rgb(\'+modeStatic.color.r+\',\'+modeStatic.color.g+\',\'+modeStatic.color.b+\')\'}" ng-click="onClick()">                                </div>                                <div class="fx-rotate-clock round-button center override button-shadow ng-hide" ng-show="isRgb && (on || !canTurnOff) && mode===\'animation\'" style="overflow: hidden;">                                    <div class="animated-color" style="height: 100%; width: 100%;" ng-style="{\'-webkit-animation-duration\': modeAnimated.speed+\'s\', \'animation-duration\': modeAnimated.speed+\'s\', \'-webkit-animation-name\': modeAnimated.animation, \'animation-name\': modeAnimated.animation}" ng-click="onClick()"></div>                                </div>                                <div class="fx-rotate-clock round-button center override button-on button-shadow ng-hide" ng-show="!isRgb && (on || !canTurnOff)" style="height: 150px; width: 150px;" ng-click="onClick()">                                    <span style="font-size: 42px;">{{ modeStatic.intensity }}%</span>                                </div>                                <div class="fx-rotate-clock round-button center override button-off button-shadow ng-hide" ng-show="!(on || !canTurnOff)" ng-click="toggle()">                                    <span style="font-size: 34px; color: white;">Apagado</span>                                </div>                            </div>                            <div class="center show-hide-opacity" ng-show="canTurnOff" style="position: absolute; top: 197px; left: 65px; height: 40px; width: 100px;" ng-click="toggle()">                                <i class="icon ion-power" style="color: white; font-size: 26px;"></i>                            </div>                        </div>',controller:function(t){void 0===t.on&&(t.on=!0),void 0===t.canTurnOff&&(t.canTurnOff=!0),void 0===t.isRgb&&(t.isRgb=!0),t.mode=t.mode||"static",t.modeStatic=t.modeStatic||{color:{r:0,g:0,b:0},intensity:0},t.modeAnimated=t.modeAnimated||{animation:"mode1",speed:1};var e=function(){t.arc=t.isRgb&&"static"!==t.mode?regularArcData(115,115,105,130,135+27.5*t.modeAnimated.speed,!1):regularArcData(115,115,105,130,135+2.75*t.modeStatic.intensity,!1)};e(),t.$watch("modeStatic.intensity",function(){e()}),t.$watch("modeAnimated.speed",function(){e()}),t.$watch("mode",function(){e()}),t.toggle=function(){t.on=!t.on}}}}),angular.module("angularTouchWidgets.directives.minutesEditor",[]).directive("minutesEditor",function(){return{restrict:"E",scope:{time:"=",onClick:"&"},replace:!0,template:'<div>                    <svg class="clock-editor" height="200" width="240" ng-click="onClick()">                        <defs>                            <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                            </filter>                        </defs>                        <g filter="url(#shadow-{{$id}})">                            <circle id="test" cx="115" cy="100" r="70" fill="white"></circle>                            <path class="content-selection" ng-attr-d="{{ semiCircle }}"></path>                            <circle id="test" cx="115" cy="100" r="65" stroke="white" fill="transparent" stroke-width="8"></circle>                            <circle id="test" cx="115" cy="100" r="70" stroke="black" fill="transparent" stroke-width="6"></circle>                        </g>                    </svg>                </div>',controller:function(t){var e=function(){var e=-90+6*t.time;t.semiCircle=regularSemiCircle(115,100,70,-90,e,!1)};e(),t.$watch("time",function(){e()})}}}),angular.module("angularTouchWidgets.directives.minutesPicker",[]).directive("minutesPicker",function(){return{restrict:"E",scope:{time:"="},template:'<div style="margin: auto; height: 250px; width: 350px;" on-drag-start="onTouch($event)" on-touch="onTouch($event)" on-drag-end="onRelease()" on-drag="drag($event)">                    <svg id="time-picker" height="250" width="350">                        <defs>                            <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                            </filter>                        </defs>                        <g>                            <circle cx="175" cy="125" r="100" fill="white"></circle>                            <path fill="#eee" d="M 175 25 A 100 100 0 0 1 225 38L 175 125"></path>                            <path fill="#eee" d="M 261 75 A 100 100 0 0 1 275 125L 175 125"></path>                            <path fill="#eee" d="M 261 175 A 100 100 0 0 1 225 211L 175 125"></path>                            <path fill="#eee" d="M 175 225 A 100 100 0 0 1 125 211L 175 125"></path>                            <path fill="#eee" d="M 88 175 A 100 100 0 0 1 75 125L 175 125"></path>                            <path fill="#eee" d="M 88 74 A 100 100 0 0 1 124 38L 175 125"></path>                        </g>                        <path class="content-selection" ng-attr-d="{{ semiCircle }}" filter="url(#shadow-{{$id}})"></path>                        <circle id="test" cx="175" cy="125" r="100" stroke="black" fill="transparent" stroke-width="6" filter="url(#shadow-{{$id}})"></circle>                        <g fill="#555">                            <text x="167" y="47">                                0                            </text>                            <text x="210" y="57">                                5                            </text>                            <text x="242" y="88">                                10                            </text>                            <text x="252" y="129">                                15                            </text>                            <text x="241" y="171">                                20                            </text>                            <text x="210" y="203">                                25                            </text>                            <text x="168" y="215">                                30                            </text>                            <text x="128" y="203">                                35                            </text>                            <text x="96" y="171">                                40                            </text>                            <text x="85" y="129">                                45                            </text>                            <text x="95" y="88">                                50                            </text>                            <text x="125" y="57">                                55                            </text>                        </g>                    </svg>                </div>',controller:function(t,e){var i=!1,r=function(){var e=-90+6*t.time;t.semiCircle=regularSemiCircle(175,125,100,-90,e,!1)},o=function(e){var i={x:e.gesture.srcEvent.layerX,y:e.gesture.srcEvent.layerY};i.y<0&&(i.x+=e.gesture.touches[0].clientX,i.y+=e.gesture.touches[0].clientY);var r={x:e.currentTarget.offsetLeft+175,y:e.currentTarget.offsetTop+125},o=getAngle(r.x,r.y,i.x,i.y);t.time=5*parseInt((o+20)/30)};t.onClick=function(t){o(t)},t.onTouch=function(t){i=!0,e.freezeAllScrolls(!0),o(t)},t.onRelease=function(){i=!1,e.freezeAllScrolls(!1)},t.drag=function(t){i&&o(t)},t.$watch("time",function(){r()}),r()}}}),angular.module("angularTouchWidgets.directives.modeSelector",[]).directive("modeSelector",function(){return{restrict:"E",scope:{modes:"=",selectedMode:"="},template:'<div class="mode-selector" ng-class="selectedMode" style="height: 26px; width: 250px; float: right; margin: 10px 10px 10px 0" ng-click="changeMode()">                    <div style="height: 100%; width: 100%; transform: translate(112px); -webkit-transform: translate(112px)">                        <div ng-click="changeMode()" class="button-shadow" style="overflow: hidden; position: absolute; width: 40px;height: 40px; border-radius: 20px; transform: translate(125px); -webkit-transform: translate(125px); margin-left: -17px; margin-top: -6px;">                            <div class="mode-selector-botton background-animation" style="height: 100%; width: 100%;"></div>                        </div>                        <div class="transform-animation" style="height: 100%; width: 100%; position: absolute; top: 0; left: 0;" ng-style="{transform: \'rotate(\'+ showMode * (-360 / modes.length)+\'deg)\', \'-webkit-transform\': \'rotate(\'+ showMode * (-360 / modes.length)+\'deg)\'}">                            <div ng-repeat="mode in modes" class="show-hide-opacity" ng-style="{transform: \'rotate(\'+ $index * (360 / modes.length) +\'deg) translate(-125px)\', \'-webkit-transform\': \'rotate(\'+ $index * (360 / modes.length) +\'deg) translate(-125px)\'}" style="width: 250px; height: 26px; text-align: end; position: absolute;" ng-show="currentMode==$index">                                <span style="margin-right: 20px">                                    {{ mode.display }}                                </span>                                <i class="icon {{ mode.name }}-app-icon" style="margin-right: -15px; font-size: 30px; vertical-align: middle;"></i>                            </div>                        </div>                    </div>                </div>',controller:function(t){var e=function(e){var i=[];angular.forEach(t.modes,function(t){i.push(t.name)});var r=i.indexOf(e);return-1==r&&(r=0),r};t.showMode=t.currentMode=e(t.selectedMode),t.selectedMode=t.modes[t.currentMode].name,t.changeMode=function(){t.showMode=t.showMode+1,t.currentMode=t.showMode%t.modes.length,t.selectedMode=t.modes[t.currentMode].name}}}}),angular.module("angularTouchWidgets.directives.onOffButton",[]).directive("onOffButton",function(){return{restrict:"E",replace:!0,scope:{value:"="},template:'  <div>                            <div class="on-off-button">                                <svg height="260" width="230">                                    <defs>                                        <filter id="button-shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                            <feOffset result="offOut" in="SourceGraphic" dx="1" dy="4"></feOffset>                                            <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                            <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                            <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                                        </filter>                                    </defs>                                    <g ng-click="toggle()">                                        <path class="show-hide-opacity button-on-svg" ng-hide="value" fill="transparent" stroke-width="40" d="M 166 204 A 103 103 0 0 1 63 204" filter="url(#button-shadow-{{$id}})"></path>                                        <path class="show-hide-opacity button-off-svg" ng-show="value" fill="transparent" stroke-width="40" d="M 166 204 A 103 103 0 0 1 63 204" filter="url(#button-shadow-{{$id}})"></path>                                    </g>                                </svg>                                <div class="center" style="position: absolute; top: 197px; left: 65px; height: 40px; width: 100px;" ng-click="toggle()">                                    <i class="icon ion-power" style="color: white; font-size: 26px;"></i>                                </div>                                <div style="position: absolute; top: 41px; left: 39px;">                                    <div class="fx-rotate-clock round-button center override button-off button-shadow" ng-hide="value" ng-click="toggle()">                                        <span style="font-size: 34px; color: white;">Apagado</span>                                    </div>                                    <div class="fx-rotate-clock round-button center override button-on button-shadow" ng-show="value" ng-click="toggle()">                                        <span style="font-size: 30px;">Encendido</span>                                    </div>                                </div>                            </div>                        </div>',controller:function(t){t.toggle=function(){t.value=!t.value}}}}),angular.module("angularTouchWidgets.directives.orpMeter",[]).directive("orpMeter",function(){return{restrict:"E",scope:{orp:"="},replace:!0,template:'<div class="meter">                    <svg height="320" width="120" style="margin-left: 20px;">                        <defs>                            <clipPath id="orpClipPath" clipPathUnits="userSpaceOnUse">                                <rect width="32" height="300" ry="16" y="10" x="30" stroke="black" fill="transparent" stroke-width="6"></rect>                            </clipPath>                            <clipPath id="orpClipPath2" clipPathUnits="userSpaceOnUse">                                <rect width="20" height="60" y="130" x="0"></rect>                                <rect width="20" height="60" y="130" x="72"></rect>                            </clipPath>                            <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                            </filter>                        </defs>                        <g filter="url(#shadow-{{$id}})">                            <rect width="82" height="50" y="135" x="5" fill="transparent" stroke="#0F0" stroke-width="4" clip-path="url(#orpClipPath2)"></rect>                            <g clip-path="url(#orpClipPath)">                                <rect width="32" height="43" y="10" x="30" fill="#FBFA4F"></rect>                                <rect width="32" height="43" y="53" x="30" fill="#F9F944"></rect>                                <rect width="32" height="43" y="96" x="30" fill="#D9F531"></rect>                                <rect width="32" height="43" y="139" x="30" fill="#A5E939"></rect>                                <rect width="32" height="43" y="182" x="30" fill="#68D62E"></rect>                                <rect width="32" height="43" y="225" x="30" fill="#2CBD34"></rect>                                <rect width="32" height="43" y="268" x="30" fill="#297C37"></rect>                            </g>                            <rect width="32" height="300" ry="16" y="10" x="30" stroke="black" fill="transparent" stroke-width="6"></rect>                        </g>                        <g ng-attr-transform="translate(28,{{posY}})" filter="url(#shadow-{{$id}})">                            <path transform="translate(0,-13)" fill="#f00" stroke="#000" stroke-width="2" d="M84.3022,22.3106 C84.2473,33.4926 75.1392,42.5115 63.9571,42.4565 C59.157,42.4329 54.5029,41.0224 51.298,37.9296 C45.0185,31.87 35.0221,25.6927 8.0808,24.1617 C7.10067,24.106 5.02515,23.916 5.049,22.0121 C5.07283,20.1095 7.13818,19.8874 8.11693,19.8378 C35.0725,18.4714 45.3311,12.386 51.4531,6.36783 C54.6291,3.24565 59.3557,1.94202 64.1562,1.96561 C75.338,2.02058 84.3572,11.1316 84.3022,22.3106 Z"></path>                            <text x="45" y="16" font-size="22" fill="white">                                {{ orp_text }}                            </text>                        </g>                    </svg>                </div>',controller:function(t){t.$watch("orp",function(){t.posY=(Math.log(t.orp)/Math.LN2+3)*(300/7)+21,t.orp_text=t.orp.toFixed(1)})}}}),angular.module("angularTouchWidgets.directives.phMeter",[]).directive("phMeter",function(){return{restrict:"E",scope:{ph:"="},replace:!0,template:'<div class="meter">                    <svg height="320" width="120" style="margin-left: 20px;">                        <defs>                            <clipPath id="phClipPath" clipPathUnits="userSpaceOnUse">                                <rect width="32" height="300" ry="16" y="10" x="30" stroke="black" fill="transparent" stroke-width="6"></rect>                            </clipPath>                            <clipPath id="phClipPath2" clipPathUnits="userSpaceOnUse">                                <rect width="20" height="60" y="130" x="0"></rect>                                <rect width="20" height="60" y="130" x="72"></rect>                            </clipPath>                            <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                            </filter>                        </defs>                        <g filter="url(#shadow-{{$id}})">                            <rect width="82" height="50" y="135" x="5" fill="transparent" stroke="#0F0" stroke-width="4" clip-path="url(#phClipPath2)"></rect>                            <g clip-path="url(#phClipPath)">                                <rect width="32" height="20" y="10" x="30" fill="#CE231C"></rect>                                <rect width="32" height="20" y="30" x="30" fill="#E1332C"></rect>                                <rect width="32" height="20" y="50" x="30" fill="#EC672E"></rect>                                <rect width="32" height="20" y="70" x="30" fill="#F3912C"></rect>                                <rect width="32" height="20" y="90" x="30" fill="#F4AE2A"></rect>                                <rect width="32" height="20" y="110" x="30" fill="#F1E81F"></rect>                                <rect width="32" height="20" y="130" x="30" fill="#D6D52D"></rect>                                <rect width="32" height="20" y="150" x="30" fill="#84BB3B"></rect>                                <rect width="32" height="20" y="170" x="30" fill="#29A340"></rect>                                <rect width="32" height="20" y="190" x="30" fill="#119147"></rect>                                <rect width="32" height="20" y="210" x="30" fill="#1E8073"></rect>                                <rect width="32" height="20" y="230" x="30" fill="#3B5F9D"></rect>                                <rect width="32" height="20" y="250" x="30" fill="#384579"></rect>                                <rect width="32" height="20" y="270" x="30" fill="#3F2B6A"></rect>                                <rect width="32" height="20" y="290" x="30" fill="#342550"></rect>                            </g>                            <rect width="32" height="300" ry="16" y="10" x="30" stroke="black" fill="transparent" stroke-width="6"></rect>                        </g>                        <g ng-attr-transform="translate(28,{{posY}})" filter="url(#shadow-{{$id}})">                            <path transform="translate(0,-13)" fill="#f00" stroke="#000" stroke-width="2" d="M84.3022,22.3106 C84.2473,33.4926 75.1392,42.5115 63.9571,42.4565 C59.157,42.4329 54.5029,41.0224 51.298,37.9296 C45.0185,31.87 35.0221,25.6927 8.0808,24.1617 C7.10067,24.106 5.02515,23.916 5.049,22.0121 C5.07283,20.1095 7.13818,19.8874 8.11693,19.8378 C35.0725,18.4714 45.3311,12.386 51.4531,6.36783 C54.6291,3.24565 59.3557,1.94202 64.1562,1.96561 C75.338,2.02058 84.3572,11.1316 84.3022,22.3106 Z"></path>                            <text x="45" y="16" font-size="22" fill="white">                                {{ ph_text }}                            </text>                        </g>                    </svg>                </div>',controller:function(t){t.$watch("ph",function(){t.posY=20*t.ph+10,t.ph_text=t.ph.toFixed(1)})}}}),angular.module("angularTouchWidgets.directives.thermometer",[]).directive("thermometer",function(){return{restrict:"E",scope:{actualTemp:"=",setTemp:"=",showActual:"="},replace:!0,template:'  <svg width="170" height="300" on-tap="onTap($event)" on-drag-start="onTouch($event)" on-drag-end="onRelease()" on-drag="drag($event)">                            <defs>                                <clipPath id="thermometerClipPath" clipPathUnits="userSpaceOnUse">                                    <path d="M54.933,7.69623 C40.936,7.69623 29.639,19.1202 29.639,33.3322 L29.639,183.306 C29.639,183.352 29.638,183.396 29.639,183.443 C16.057,192.031 7,207.31 7,224.752 C7,251.623 28.466,273.417 54.933,273.417 C81.4,273.417 102.867,251.623 102.867,224.752 C102.867,207.296 93.783,192.028 80.183,183.443 C80.183,183.396 80.183,183.352 80.183,183.306 L80.183,33.3322 C80.183,19.1202 68.931,7.69623 54.933,7.69623 Z"></path>                                </clipPath>                                <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                    <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                    <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                    <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                    <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                                </filter>                            </defs>                            <g filter="url(#shadow-{{$id}})">                                <g clip-path="url(#thermometerClipPath)">                                    <rect height="300" width="130" fill="white"></rect>                                    <rect class="content-selection" height="300" width="130" ng-attr-y="{{ setTempYPosition }}"></rect>                                    <rect class="secondary-content-selection" height="300" width="130" ng-attr-y="{{ actualTempYPosition }}" ng-show="actualTemp"></rect>                                    <path fill="none" stroke="white" stroke-width="18" stroke-miterlimit="4" d="M54.933,7.69623 C40.936,7.69623 29.639,19.1202 29.639,33.3322 L29.639,183.306 C29.639,183.352 29.638,183.396 29.639,183.443 C16.057,192.031 7,207.31 7,224.752 C7,251.623 28.466,273.417 54.933,273.417 C81.4,273.417 102.867,251.623 102.867,224.752 C102.867,207.296 93.783,192.028 80.183,183.443 C80.183,183.396 80.183,183.352 80.183,183.306 L80.183,33.3322 C80.183,19.1202 68.931,7.69623 54.933,7.69623 Z"></path>                                </g>                                <path fill="none" stroke="black" stroke-width="6" stroke-miterlimit="4" d="M54.933,7.69623 C40.936,7.69623 29.639,19.1202 29.639,33.3322 L29.639,183.306 C29.639,183.352 29.638,183.396 29.639,183.443 C16.057,192.031 7,207.31 7,224.752 C7,251.623 28.466,273.417 54.933,273.417 C81.4,273.417 102.867,251.623 102.867,224.752 C102.867,207.296 93.783,192.028 80.183,183.443 C80.183,183.396 80.183,183.352 80.183,183.306 L80.183,33.3322 C80.183,19.1202 68.931,7.69623 54.933,7.69623 Z"></path>                            </g>                            <text x="110" ng-attr-y="{{ setTempYPosition + 5 }}" font-size="20" ng-hide="actualTemp && (setTemp < actualTemp)">                                {{ setTemp }}°C                            </text>                            <text x="110" ng-attr-y="{{ actualTempYPosition + 5 }}" font-size="20" ng-show="actualTemp">                                {{ actualTemp }}°C                            </text>                        </svg>',controller:function(t,e){void 0===t.showActual&&(t.showActual=void 0!==t.actualTemp);
var i,r=!1,o=-20,n=50,a=260,l=10,s=function(t){var e=a*(t-o)/(n-o);return a-e+l},c=function(t){var e=Math.round((a-t+l)/a*(n-o)+o);return e>n?e=n:o>e&&(e=o),e};t.onTap=function(e){t.onTouch(e),t.onRelease(e)},t.onTouch=function(o){r=!0,e.freezeAllScrolls(!0),i=o.currentTarget.offsetTop;var n=o.gesture.srcEvent.layerY-i;0>n&&(n+=o.gesture.touches[0].clientY),t.setTemp=c(n)},t.onRelease=function(){r=!1,e.freezeAllScrolls(!1)},t.drag=function(e){if(r){var o=e.gesture.srcEvent.layerY-i;0>o&&(o+=e.gesture.touches[0].clientY),t.setTemp=c(o)}};var d=function(){t.showActual&&(t.actualTempYPosition=s(t.actualTemp)),t.setTempYPosition=s(t.setTemp)};d(),t.$watch("actualTemp",function(){d()}),t.$watch("setTemp",function(){d()})}}}),angular.module("angularTouchWidgets.directives.timePicker",[]).directive("timePicker",function(){return{restrict:"E",scope:{from:"=",to:"="},template:'<div style="margin: auto; height: 250px; width: 350px;" on-drag-start="onTouch($event)" on-drag-end="onRelease()" on-drag="drag($event)">                    <svg id="time-picker" height="250" width="350">                        <defs>                            <filter id="shadow-{{$id}}" x="-200%" y="-200%" width="450%" height="450%">                                <feOffset result="offOut" in="SourceGraphic" dx="0" dy="2"></feOffset>                                <feColorMatrix result="matrixOut" in="offOut" type="matrix" values="0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0"></feColorMatrix>                                <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>                                <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>                            </filter>                        </defs>                        <g>                            <circle cx="175" cy="125" r="100" fill="white"></circle>                            <path fill="#eee" d="M 175 25 A 100 100 0 0 1 225 38L 175 125"></path>                            <path fill="#eee" d="M 261 75 A 100 100 0 0 1 275 125L 175 125"></path>                            <path fill="#eee" d="M 261 175 A 100 100 0 0 1 225 211L 175 125"></path>                            <path fill="#eee" d="M 175 225 A 100 100 0 0 1 125 211L 175 125"></path>                            <path fill="#eee" d="M 88 175 A 100 100 0 0 1 75 125L 175 125"></path>                            <path fill="#eee" d="M 88 74 A 100 100 0 0 1 124 38L 175 125"></path>                        </g>                        <g>                            <circle cx="175" cy="125" r="70" fill="white"></circle>                            <path fill="#eee" d="M 210 64 A 70 70 0 0 1 235 90L 175 125"></path>                            <path fill="#eee" d="M 245 125 A 70 70 0 0 1 235 160L 175 125"></path>                            <path fill="#eee" d="M 210 185 A 70 70 0 0 1 175 195L 175 125"></path>                            <path fill="#eee" d="M 140 185 A 70 70 0 0 1 114 160L 175 125"></path>                            <path fill="#eee" d="M 105 125 A 70 70 0 0 1 114 90L 175 125"></path>                            <path fill="#eee" d="M 139 64 A 70 70 0 0 1 175 55L 175 125"></path>                        </g>                        <path class="content-selection" ng-attr-d="{{ semiCircle }}" filter="url(#shadow-{{$id}})"></path>                        <circle id="test" cx="175" cy="125" r="100" stroke="black" fill="transparent" stroke-width="6" filter="url(#shadow-{{$id}})"></circle>                        <g fill="#555">                            <text x="167" y="47">                                00                            </text>                            <text x="210" y="57">                                13                            </text>                            <text x="242" y="88">                                14                            </text>                            <text x="252" y="129">                                15                            </text>                            <text x="241" y="171">                                16                            </text>                            <text x="210" y="203">                                17                            </text>                            <text x="168" y="215">                                18                            </text>                            <text x="128" y="203">                                19                            </text>                            <text x="96" y="171">                                20                            </text>                            <text x="85" y="129">                                21                            </text>                            <text x="95" y="88">                                22                            </text>                            <text x="125" y="57">                                23                            </text>                        </g>                        <g fill="#555">                            <text x="168" y="72">                                12                            </text>                            <text x="199" y="80">                                1                            </text>                            <text x="221" y="100">                                2                            </text>                            <text x="228" y="129">                                3                            </text>                            <text x="221" y="159">                                4                            </text>                            <text x="200" y="181">                                5                            </text>                            <text x="171" y="189">                                6                            </text>                            <text x="142" y="181">                                7                            </text>                            <text x="121" y="158">                                8                            </text>                            <text x="112" y="129">                                9                            </text>                            <text x="119" y="101">                                10                            </text>                            <text x="137" y="81">                                11                            </text>                        </g>                        <text ng-attr-x="{{fromPos.x-20}}" ng-attr-y="{{fromPos.y+9}}" font-size="20">                            {{ from }}                        </text>                        <text ng-attr-x="{{toPos.x-20}}" ng-attr-y="{{toPos.y+9}}" font-size="20">                            {{ to }}                        </text>                    </svg>                </div>',controller:function(t,e){var i,r,o,n,a=!1,l=function(){var e=parseTime(t.from),i=parseTime(t.to),r=-90+(30*e.hours+.5*e.minutes),o=-90+(30*i.hours+.5*i.minutes);t.semiCircle=regularSemiCircle(175,125,100,r,o,!1),t.fromPos=positionOnCircle(175,125,100,r,40,14),t.toPos=positionOnCircle(175,125,100,o,40,14)},s=function(t,e){var i=parseTime(t),r=parseTime(e);return i.hours>r.hours||i.hours==r.hours&&i.minutes>=r.minutes},c=function(t,e){var i=parseTime(t),r=parseTime(e);return i.hours>r.hours||i.hours==r.hours&&i.minutes>r.minutes};t.onTouch=function(l){a=!0,e.freezeAllScrolls(!0);var s={x:l.gesture.srcEvent.layerX,y:l.gesture.srcEvent.layerY};s.y<0&&(s.x+=l.gesture.touches[0].clientX,s.y+=l.gesture.touches[0].clientY),r={x:l.currentTarget.offsetLeft+175,y:l.currentTarget.offsetTop+125},i=getModule(r.x,r.y,s.x,s.y)<70?0:12,o=getAngle(r.x,r.y,s.x,s.y),t.from=""+(parseInt(o/30)+i)+":"+(15>o%30?"00":"30"),t.to=t.from,n=!1},t.onRelease=function(){a=!1,e.freezeAllScrolls(!1)},t.drag=function(e){if(a){var l={x:e.gesture.srcEvent.layerX,y:e.gesture.srcEvent.layerY};l.y<0&&(l.x+=e.gesture.touches[0].clientX,l.y+=e.gesture.touches[0].clientY);var d=getAngle(r.x,r.y,l.x,l.y);(o>270&&90>d||d>270&&90>o)&&(i=0===i?12:0),o=d;var u,h=""+(parseInt(o/30)+i)+":"+(15>o%30?"00":"30");u=n?!c(h,t.to):!s(h,t.from),u?t.from=h:t.to=h,n=u}},t.$watch("from",function(){l()}),t.$watch("to",function(){l()}),l()}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy9hbmd1bGFyVG91Y2hXaWRnZXRzLm1vZHVsZS5qcyIsImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy9kaXJlY3RpdmVzL2Nsb2NrLWVkaXRvci1kaXJlY3RpdmUuanMiLCJhbmd1bGFyLXRvdWNoLXdpZGdldHMvZGlyZWN0aXZlcy9jb2xvci1pbnRlbnNpdHktZGlyZWN0aXZlLmpzIiwiYW5ndWxhci10b3VjaC13aWRnZXRzL2RpcmVjdGl2ZXMvY29sb3Itd2hlZWwtZGlyZWN0aXZlLmpzIiwiYW5ndWxhci10b3VjaC13aWRnZXRzL2RpcmVjdGl2ZXMvZGlyZWN0aXZlcy5qcyIsImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy9kaXJlY3RpdmVzL2xpZ2h0LWVkaXRvci1kaXJlY3RpdmUuanMiLCJhbmd1bGFyLXRvdWNoLXdpZGdldHMvZGlyZWN0aXZlcy9taW51dGVzLWVkaXRvci1kaXJlY3RpdmUuanMiLCJhbmd1bGFyLXRvdWNoLXdpZGdldHMvZGlyZWN0aXZlcy9taW51dGVzLXBpY2tlci1kaXJlY3RpdmUuanMiLCJhbmd1bGFyLXRvdWNoLXdpZGdldHMvZGlyZWN0aXZlcy9tb2RlLXNlbGVjdG9yLWRpcmVjdGl2ZS5qcyIsImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy9kaXJlY3RpdmVzL29uLW9mZi1idXR0b24tZGlyZWN0aXZlLmpzIiwiYW5ndWxhci10b3VjaC13aWRnZXRzL2RpcmVjdGl2ZXMvb3JwLW1ldGVyLWRpcmVjdGl2ZS5qcyIsImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy9kaXJlY3RpdmVzL3BoLW1ldGVyLWRpcmVjdGl2ZS5qcyIsImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy9kaXJlY3RpdmVzL3RoZXJtb21ldGVyLWRpcmVjdGl2ZS5qcyIsImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy9kaXJlY3RpdmVzL3RpbWUtcGlja2VyLWRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQ3NEQSxTQUFBLFdBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxNQUFBLElBQ0EsUUFDQSxNQUFBLFNBQUEsRUFBQSxJQUNBLFFBQUEsU0FBQSxFQUFBLEtDeERBLFFBQUEsZ0JBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEdBQUEsSUFDQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEdBQUEsSUFDQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsSUFBQSxLQUFBLEdBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEtBQUEsSUFBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLEtBQUEsSUFBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLEtBQUEsSUFBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLEtBQUEsSUFBQSxHQUNBLEVBQUEsSUFDQSxFQUFBLEVBR0EsT0FGQSxJQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUNBLEdBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBR0EsUUFBQSxtQkFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsSUFDQSxFQUFBLGVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFFQSxPQURBLElBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUdBLFFBQUEsa0JBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsS0FBQSxHQUFBLElBQ0EsRUFBQSxTQUFBLEdBQUEsRUFBQSxHQUFBLEtBQUEsSUFBQSxJQUNBLEVBQUEsU0FBQSxHQUFBLEVBQUEsR0FBQSxLQUFBLElBQUEsR0FDQSxRQUNBLEVBQUEsRUFDQSxFQUFBLEdBR0EsUUFBQSxXQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsTUFBQSxJQUNBLFFBQ0EsTUFBQSxTQUFBLEVBQUEsSUFDQSxRQUFBLFNBQUEsRUFBQSxLQUdBLFFBQUEsVUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUNBLEVBQUEsS0FBQSxLQUFBLEVBR0EsT0FGQSxHQUFBLEVBQUEsSUFDQSxHQUFBLEtBQUEsSUFDQSxJQUFBLEVBQUEsS0FBQSxHQUFBLEdBRUEsUUFBQSxXQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsQ0FDQSxPQUFBLE1BQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxJRmxEQSxTQUFBLEdBQ0EsRUFBQSxPQUFBLDhCQUFBLFVBQUEsTUFBQSw4QkFBQSxPQUFBLElBQ0EsRUFBQSxPQUFBLHFDQUNBLEVBQUEsT0FBQSx1QkFBQSw2QkFBQSxvQ0FDQSxTQ0pBLFFBQUEsT0FBQSxpREFBQSxVQUFBLGNBQUEsV0FDQSxPQUNBLFNBQUEsSUFDQSxPQUNBLEtBQUEsSUFDQSxHQUFBLElBQ0EsUUFBQSxLQUVBLFNBQUEsRUFDQSxTQUFBLHNxREF3QkEsV0FBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLFdBQ0EsR0FBQSxHQUFBLFVBQUEsRUFBQSxNQUNBLEVBQUEsVUFBQSxFQUFBLElBQ0EsRUFBQSxLQUFBLEdBQUEsRUFBQSxNQUFBLEdBQUEsRUFBQSxTQUNBLEVBQUEsS0FBQSxHQUFBLEVBQUEsTUFBQSxHQUFBLEVBQUEsUUFDQSxHQUFBLFdBQUEsa0JBQUEsSUFBQSxJQUFBLEdBQUEsRUFBQSxHQUFBLEdBQ0EsRUFBQSxRQUFBLGlCQUFBLElBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxJQUNBLEVBQUEsTUFBQSxpQkFBQSxJQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsSUFFQSxLQUNBLEVBQUEsT0FBQSxPQUFBLFdBQ0EsTUFFQSxFQUFBLE9BQUEsS0FBQSxXQUNBLFVFaERBLFFBQUEsT0FBQSxvREFBQSxVQUFBLGlCQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsU0FBQSxFQUNBLE9BQUEsVUFBQSxLQUNBLFNBQUEsbVNDTEEsUUFBQSxPQUFBLGdEQUFBLFVBQUEsYUFBQSxTQUFBLEdBQ0EsT0FDQSxTQUFBLElBQ0EsU0FBQSxFQUNBLE9BQ0EsTUFBQSxJQUNBLElBQUEsS0FFQSxTQUFBLGdoQkFJQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFdBQUEsR0FBQSxXQUFBLE1BQ0EsRUFBQSxRQUFBLFFBQUEsRUFBQSxXQUFBLElBQ0EsRUFBQSxHQUFBLE1BQ0EsR0FBQSxPQUFBLFdBQ0EsRUFBQSxVQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsTUFFQSxFQUFBLElBQUEsRUFBQSxLQUFBLHFCQUNBLElBQUEsR0FBQSxXQUNBLEVBQUEsU0FBQSxFQUFBLHdCQUFBLEtBQUEsV0FDQSxFQUFBLFlBQUEsMEJBR0EsR0FBQSxXQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxhQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxHQUFBLElBQ0EsS0FBQSxFQUFBLEtBQ0EsUUFBQSxNQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxJQUNBLEVBQUEsT0FDQSxVRmpDQSxRQUFBLE9BQUEsa0NBQUEsOENBQUEsNkNBQUEsNENBQUEsZ0RBQUEsNkNBQUEsK0NBQUEsNENBQUEsK0NBQUEsNkNBQUEseUNBQUEsMENBQUEsK0NHQUEsUUFBQSxPQUFBLGlEQUFBLFVBQUEsY0FBQSxXQUNBLE9BQ0EsU0FBQSxJQUNBLFNBQUEsRUFDQSxPQUNBLEdBQUEsSUFDQSxLQUFBLElBQ0EsV0FBQSxJQUNBLE1BQUEsSUFDQSxRQUFBLElBQ0EsV0FBQSxJQUNBLGFBQUEsS0FFQSxTQUFBLDQvSkE4Q0EsV0FBQSxTQUFBLEdBQ0EsU0FBQSxFQUFBLEtBQ0EsRUFBQSxJQUFBLEdBRUEsU0FBQSxFQUFBLGFBQ0EsRUFBQSxZQUFBLEdBRUEsU0FBQSxFQUFBLFFBQ0EsRUFBQSxPQUFBLEdBRUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxTQUNBLEVBQUEsV0FBQSxFQUFBLGFBQ0EsT0FDQSxFQUFBLEVBQ0EsRUFBQSxFQUNBLEVBQUEsR0FFQSxVQUFBLEdBRUEsRUFBQSxhQUFBLEVBQUEsZUFDQSxVQUFBLFFBQ0EsTUFBQSxFQUVBLElBQUEsR0FBQSxXQUlBLEVBQUEsSUFIQSxFQUFBLE9BQUEsV0FBQSxFQUFBLEtBR0EsZUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxFQUFBLGFBQUEsT0FBQSxHQUZBLGVBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsRUFBQSxXQUFBLFdBQUEsR0FLQSxLQUNBLEVBQUEsT0FBQSx1QkFBQSxXQUNBLE1BRUEsRUFBQSxPQUFBLHFCQUFBLFdBQ0EsTUFFQSxFQUFBLE9BQUEsT0FBQSxXQUNBLE1BRUEsRUFBQSxPQUFBLFdBQ0EsRUFBQSxJQUFBLEVBQUEsUUNwR0EsUUFBQSxPQUFBLG1EQUFBLFVBQUEsZ0JBQUEsV0FDQSxPQUNBLFNBQUEsSUFDQSxPQUNBLEtBQUEsSUFDQSxRQUFBLEtBRUEsU0FBQSxFQUNBLFNBQUEsazFDQWtCQSxXQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsV0FDQSxHQUFBLEdBQUEsSUFBQSxFQUFBLEVBQUEsSUFDQSxHQUFBLFdBQUEsa0JBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEdBRUEsS0FDQSxFQUFBLE9BQUEsT0FBQSxXQUNBLFVDakNBLFFBQUEsT0FBQSxtREFBQSxVQUFBLGdCQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsT0FBQSxLQUFBLEtBQ0EsU0FBQSxnNEdBNkRBLFdBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxJQUFBLEVBQ0EsRUFBQSxXQUNBLEdBQUEsR0FBQSxJQUFBLEVBQUEsRUFBQSxJQUNBLEdBQUEsV0FBQSxrQkFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEdBQUEsSUFFQSxFQUFBLFNBQUEsR0FDQSxHQUFBLElBQ0EsRUFBQSxFQUFBLFFBQUEsU0FBQSxPQUNBLEVBQUEsRUFBQSxRQUFBLFNBQUEsT0FFQSxHQUFBLEVBQUEsSUFDQSxFQUFBLEdBQUEsRUFBQSxRQUFBLFFBQUEsR0FBQSxRQUNBLEVBQUEsR0FBQSxFQUFBLFFBQUEsUUFBQSxHQUFBLFFBRUEsSUFBQSxJQUNBLEVBQUEsRUFBQSxjQUFBLFdBQUEsSUFDQSxFQUFBLEVBQUEsY0FBQSxVQUFBLEtBRUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFDQSxHQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsSUFBQSxJQUVBLEdBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxJQUVBLEVBQUEsUUFBQSxTQUFBLEdBQ0EsR0FBQSxFQUNBLEVBQUEsa0JBQUEsR0FDQSxFQUFBLElBRUEsRUFBQSxVQUFBLFdBQ0EsR0FBQSxFQUNBLEVBQUEsa0JBQUEsSUFFQSxFQUFBLEtBQUEsU0FBQSxHQUNBLEdBQ0EsRUFBQSxJQUdBLEVBQUEsT0FBQSxPQUFBLFdBQ0EsTUFFQSxRQzNHQSxRQUFBLE9BQUEsa0RBQUEsVUFBQSxlQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsT0FDQSxNQUFBLElBQ0EsYUFBQSxLQUVBLFNBQUEsMHZEQWVBLFdBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxTQUFBLEdBQ0EsR0FBQSxLQUNBLFNBQUEsUUFBQSxFQUFBLE1BQUEsU0FBQSxHQUNBLEVBQUEsS0FBQSxFQUFBLE9BRUEsSUFBQSxHQUFBLEVBQUEsUUFBQSxFQUlBLE9BSEEsSUFBQSxJQUNBLEVBQUEsR0FFQSxFQUVBLEdBQUEsU0FBQSxFQUFBLFlBQUEsRUFBQSxFQUFBLGNBQ0EsRUFBQSxhQUFBLEVBQUEsTUFBQSxFQUFBLGFBQUEsS0FDQSxFQUFBLFdBQUEsV0FDQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQ0EsRUFBQSxZQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsT0FDQSxFQUFBLGFBQUEsRUFBQSxNQUFBLEVBQUEsYUFBQSxVQ3ZDQSxRQUFBLE9BQUEsaURBQUEsVUFBQSxjQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsU0FBQSxFQUNBLE9BQUEsTUFBQSxLQUNBLFNBQUEscy9FQTZCQSxXQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsV0FDQSxFQUFBLE9BQUEsRUFBQSxXQ3BDQSxRQUFBLE9BQUEsOENBQUEsVUFBQSxXQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsT0FBQSxJQUFBLEtBQ0EsU0FBQSxFQUNBLFNBQUEsK3dHQXNDQSxXQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsTUFBQSxXQUNBLEVBQUEsTUFBQSxLQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsR0FBQSxHQUNBLEVBQUEsU0FBQSxFQUFBLElBQUEsUUFBQSxTQzlDQSxRQUFBLE9BQUEsNkNBQUEsVUFBQSxVQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsT0FBQSxHQUFBLEtBQ0EsU0FBQSxFQUNBLFNBQUEsd2hJQThDQSxXQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsS0FBQSxXQUNBLEVBQUEsS0FBQSxHQUFBLEVBQUEsR0FBQSxHQUNBLEVBQUEsUUFBQSxFQUFBLEdBQUEsUUFBQSxTQ3REQSxRQUFBLE9BQUEsaURBQUEsVUFBQSxjQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsT0FDQSxXQUFBLElBQ0EsUUFBQSxJQUNBLFdBQUEsS0FFQSxTQUFBLEVBQ0EsU0FBQSxvOUdBNEJBLFdBQUEsU0FBQSxFQUFBLEdBQ0EsU0FBQSxFQUFBLGFBQ0EsRUFBQSxXQUFBLFNBQUEsRUFBQSxXQUVBO0dBQUEsR0FDQSxHQUFBLEVBQ0EsRUFBQSxJQUNBLEVBQUEsR0FDQSxFQUFBLElBQ0EsRUFBQSxHQUNBLEVBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEVBQ0EsT0FBQSxHQUFBLEVBQUEsR0FFQSxFQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQSxHQUFBLEVBTUEsT0FMQSxHQUFBLEVBQ0EsRUFBQSxFQUNBLEVBQUEsSUFDQSxFQUFBLEdBRUEsRUFFQSxHQUFBLE1BQUEsU0FBQSxHQUNBLEVBQUEsUUFBQSxHQUNBLEVBQUEsVUFBQSxJQUVBLEVBQUEsUUFBQSxTQUFBLEdBQ0EsR0FBQSxFQUNBLEVBQUEsa0JBQUEsR0FDQSxFQUFBLEVBQUEsY0FBQSxTQUNBLElBQUEsR0FBQSxFQUFBLFFBQUEsU0FBQSxPQUFBLENBQ0EsR0FBQSxJQUNBLEdBQUEsRUFBQSxRQUFBLFFBQUEsR0FBQSxTQUVBLEVBQUEsUUFBQSxFQUFBLElBRUEsRUFBQSxVQUFBLFdBQ0EsR0FBQSxFQUNBLEVBQUEsa0JBQUEsSUFFQSxFQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsRUFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLFFBQUEsU0FBQSxPQUFBLENBQ0EsR0FBQSxJQUNBLEdBQUEsRUFBQSxRQUFBLFFBQUEsR0FBQSxTQUVBLEVBQUEsUUFBQSxFQUFBLElBR0EsSUFBQSxHQUFBLFdBQ0EsRUFBQSxhQUNBLEVBQUEsb0JBQUEsRUFBQSxFQUFBLGFBRUEsRUFBQSxpQkFBQSxFQUFBLEVBQUEsU0FFQSxLQUNBLEVBQUEsT0FBQSxhQUFBLFdBQ0EsTUFFQSxFQUFBLE9BQUEsVUFBQSxXQUNBLFVDbEdBLFFBQUEsT0FBQSxnREFBQSxVQUFBLGFBQUEsV0FDQSxPQUNBLFNBQUEsSUFDQSxPQUNBLEtBQUEsSUFDQSxHQUFBLEtBRUEsU0FBQSxtMUxBa0hBLFdBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUNBLEVBQ0EsRUFDQSxFQUNBLEdBQUEsRUFFQSxFQUFBLFdBQ0EsR0FBQSxHQUFBLFVBQUEsRUFBQSxNQUNBLEVBQUEsVUFBQSxFQUFBLElBQ0EsRUFBQSxLQUFBLEdBQUEsRUFBQSxNQUFBLEdBQUEsRUFBQSxTQUNBLEVBQUEsS0FBQSxHQUFBLEVBQUEsTUFBQSxHQUFBLEVBQUEsUUFDQSxHQUFBLFdBQUEsa0JBQUEsSUFBQSxJQUFBLElBQUEsRUFBQSxHQUFBLEdBQ0EsRUFBQSxRQUFBLGlCQUFBLElBQUEsSUFBQSxJQUFBLEVBQUEsR0FBQSxJQUNBLEVBQUEsTUFBQSxpQkFBQSxJQUFBLElBQUEsSUFBQSxFQUFBLEdBQUEsS0FFQSxFQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxVQUFBLEdBQ0EsRUFBQSxVQUFBLEVBQ0EsT0FBQSxHQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsU0FFQSxFQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxVQUFBLEdBQ0EsRUFBQSxVQUFBLEVBQ0EsT0FBQSxHQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsUUFFQSxHQUFBLFFBQUEsU0FBQSxHQUNBLEdBQUEsRUFDQSxFQUFBLGtCQUFBLEVBQ0EsSUFBQSxJQUNBLEVBQUEsRUFBQSxRQUFBLFNBQUEsT0FDQSxFQUFBLEVBQUEsUUFBQSxTQUFBLE9BRUEsR0FBQSxFQUFBLElBQ0EsRUFBQSxHQUFBLEVBQUEsUUFBQSxRQUFBLEdBQUEsUUFDQSxFQUFBLEdBQUEsRUFBQSxRQUFBLFFBQUEsR0FBQSxTQUVBLEdBQ0EsRUFBQSxFQUFBLGNBQUEsV0FBQSxJQUNBLEVBQUEsRUFBQSxjQUFBLFVBQUEsS0FFQSxFQUFBLFVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQSxHQUNBLEVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxLQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsR0FBQSxLQUFBLEdBQUEsRUFBQSxHQUFBLEtBQUEsTUFDQSxFQUFBLEdBQUEsRUFBQSxLQUNBLEdBQUEsR0FFQSxFQUFBLFVBQUEsV0FDQSxHQUFBLEVBQ0EsRUFBQSxrQkFBQSxJQUVBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsR0FBQSxFQUFBLENBQ0EsR0FBQSxJQUNBLEVBQUEsRUFBQSxRQUFBLFNBQUEsT0FDQSxFQUFBLEVBQUEsUUFBQSxTQUFBLE9BRUEsR0FBQSxFQUFBLElBQ0EsRUFBQSxHQUFBLEVBQUEsUUFBQSxRQUFBLEdBQUEsUUFDQSxFQUFBLEdBQUEsRUFBQSxRQUFBLFFBQUEsR0FBQSxRQUVBLElBQUEsR0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLEtBQUEsR0FBQSxHQUFBLEVBQUEsS0FBQSxHQUFBLEtBQ0EsRUFBQSxJQUFBLEVBQUEsR0FBQSxHQUVBLEVBQUEsQ0FDQSxJQUNBLEdBREEsRUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEdBQUEsS0FBQSxHQUFBLEVBQUEsR0FBQSxLQUFBLEtBR0EsR0FEQSxHQUNBLEVBQUEsRUFBQSxFQUFBLEtBRUEsRUFBQSxFQUFBLEVBQUEsTUFFQSxFQUNBLEVBQUEsS0FBQSxFQUVBLEVBQUEsR0FBQSxFQUVBLEVBQUEsSUFHQSxFQUFBLE9BQUEsT0FBQSxXQUNBLE1BRUEsRUFBQSxPQUFBLEtBQUEsV0FDQSxNQUVBIiwiZmlsZSI6ImFuZ3VsYXItdG91Y2gtd2lkZ2V0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAvLyBDcmVhdGUgYWxsIG1vZHVsZXMgYW5kIGRlZmluZSBkZXBlbmRlbmNpZXMgdG8gbWFrZSBzdXJlIHRoZXkgZXhpc3RcbiAgLy8gYW5kIGFyZSBsb2FkZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgdG8gc2F0aXNmeSBkZXBlbmRlbmN5IGluamVjdGlvblxuICAvLyBiZWZvcmUgYWxsIG5lc3RlZCBmaWxlcyBhcmUgY29uY2F0ZW5hdGVkIGJ5IEd1bHBcblxuICAvLyBDb25maWdcbiAgYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuY29uZmlnJywgWydpb25pYyddKVxuICAgICAgLnZhbHVlKCdhbmd1bGFyVG91Y2hXaWRnZXRzLmNvbmZpZycsIHtcbiAgICAgICAgICBkZWJ1ZzogdHJ1ZVxuICAgICAgfSk7XG5cbiAgLy8gTW9kdWxlc1xuICBhbmd1bGFyLm1vZHVsZSgnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzJywgW10pO1xuICBhbmd1bGFyLm1vZHVsZSgnYW5ndWxhclRvdWNoV2lkZ2V0cycsXG4gICAgICBbXG4gICAgICAgICAgJ2FuZ3VsYXJUb3VjaFdpZGdldHMuY29uZmlnJyxcbiAgICAgICAgICAnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzJ1xuICAgICAgXSk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5jbG9ja0VkaXRvcicsIFtdKVxuXG4gIC5kaXJlY3RpdmUoJ2Nsb2NrRWRpdG9yJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICBzY29wZTogeyBmcm9tOiAnPScsIHRvOiAnPScsIG9uQ2xpY2s6ICcmJyB9LFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlOic8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJjbG9jay1lZGl0b3JcIiBoZWlnaHQ9XCIyMDBcIiB3aWR0aD1cIjI0MFwiIG5nLWNsaWNrPVwib25DbGljaygpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlciBpZD1cInNoYWRvdy17eyRpZH19XCIgeD1cIi0yMDAlXCIgeT1cIi0yMDAlXCIgd2lkdGg9XCI0NTAlXCIgaGVpZ2h0PVwiNDUwJVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZU9mZnNldCByZXN1bHQ9XCJvZmZPdXRcIiBpbj1cIlNvdXJjZUdyYXBoaWNcIiBkeD1cIjBcIiBkeT1cIjJcIj48L2ZlT2Zmc2V0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUNvbG9yTWF0cml4IHJlc3VsdD1cIm1hdHJpeE91dFwiIGluPVwib2ZmT3V0XCIgdHlwZT1cIm1hdHJpeFwiIHZhbHVlcz1cIjAuNCAwIDAgMCAwIDAgMC40IDAgMCAwIDAgMCAwLjQgMCAwIDAgMCAwIDEgMFwiPjwvZmVDb2xvck1hdHJpeD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwibWF0cml4T3V0XCIgc3RkRGV2aWF0aW9uPVwiMlwiPjwvZmVHYXVzc2lhbkJsdXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlQmxlbmQgaW49XCJTb3VyY2VHcmFwaGljXCIgaW4yPVwiYmx1ck91dFwiIG1vZGU9XCJub3JtYWxcIj48L2ZlQmxlbmQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpbHRlcj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZyBmaWx0ZXI9XCJ1cmwoI3NoYWRvdy17eyRpZH19KVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBpZD1cInRlc3RcIiBjeD1cIjExNVwiIGN5PVwiMTAwXCIgcj1cIjcwXCIgZmlsbD1cIndoaXRlXCI+PC9jaXJjbGU+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBjbGFzcz1cImNvbnRlbnQtc2VsZWN0aW9uXCIgbmctYXR0ci1kPVwie3sgc2VtaUNpcmNsZSB9fVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgaWQ9XCJ0ZXN0XCIgY3g9XCIxMTVcIiBjeT1cIjEwMFwiIHI9XCI2NVwiIHN0cm9rZT1cIndoaXRlXCIgZmlsbD1cInRyYW5zcGFyZW50XCIgc3Ryb2tlLXdpZHRoPVwiOFwiPjwvY2lyY2xlPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBpZD1cInRlc3RcIiBjeD1cIjExNVwiIGN5PVwiMTAwXCIgcj1cIjcwXCIgc3Ryb2tlPVwiYmxhY2tcIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBzdHJva2Utd2lkdGg9XCI2XCI+PC9jaXJjbGU+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgbmctYXR0ci14PVwie3tmcm9tUG9zLngtMjB9fVwiIG5nLWF0dHIteT1cInt7ZnJvbVBvcy55Kzd9fVwiIGZvbnQtc2l6ZT1cIjE0XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgZnJvbSB9fVxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IG5nLWF0dHIteD1cInt7dG9Qb3MueC0yMH19XCIgbmctYXR0ci15PVwie3t0b1Bvcy55Kzd9fVwiIGZvbnQtc2l6ZT1cIjE0XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB0byB9fVxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxcbiAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlKXtcblxuICAgICAgICB2YXIgZHJhd1JhbmdlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICB2YXIgcGFyc2VkRnJvbSA9IHBhcnNlVGltZSgkc2NvcGUuZnJvbSk7XG4gICAgICAgICAgdmFyIHBhcnNlZFRvID0gcGFyc2VUaW1lKCRzY29wZS50byk7XG4gICAgICAgICAgdmFyIGZyb21BbmdsZT0tOTArKHBhcnNlZEZyb20uaG91cnMqMzArcGFyc2VkRnJvbS5taW51dGVzKjAuNSk7XG4gICAgICAgICAgdmFyIHRvQW5nbGU9LTkwKyhwYXJzZWRUby5ob3VycyozMCtwYXJzZWRUby5taW51dGVzKjAuNSk7XG4gICAgICAgICAgJHNjb3BlLnNlbWlDaXJjbGUgPSByZWd1bGFyU2VtaUNpcmNsZSgxMTUsMTAwLDcwLGZyb21BbmdsZSx0b0FuZ2xlLGZhbHNlKTtcbiAgICAgICAgICAkc2NvcGUuZnJvbVBvcyA9IHBvc2l0aW9uT25DaXJjbGUoMTE1LDEwMCw3MCxmcm9tQW5nbGUsMjQsMTQpO1xuICAgICAgICAgICRzY29wZS50b1BvcyA9IHBvc2l0aW9uT25DaXJjbGUoMTE1LDEwMCw3MCx0b0FuZ2xlLDI0LDE0KTtcbiAgICAgICAgfTtcblxuICAgICAgICBkcmF3UmFuZ2UoKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdmcm9tJyxmdW5jdGlvbigpe1xuICAgICAgICAgIGRyYXdSYW5nZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCd0bycsZnVuY3Rpb24oKXtcbiAgICAgICAgICBkcmF3UmFuZ2UoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWUpe1xuICB2YXIgciA9IHRpbWUuc3BsaXQoXCI6XCIpO1xuICByZXR1cm4ge2hvdXJzOiBwYXJzZUludChyWzBdKSwgbWludXRlczogcGFyc2VJbnQoclsxXSl9O1xufVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5jb2xvckludGVuc2l0eScsIFtdKVxuXG4gIC5kaXJlY3RpdmUoJ2NvbG9ySW50ZW5zaXR5JywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgc2NvcGU6IHsgaW50ZW5zaXR5OiAnPScgfSxcbiAgICAgIHRlbXBsYXRlOic8ZGl2IGNsYXNzPVwicmFuZ2UgcmFuZ2UtcG9zaXRpdmVcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGlvbi1pb3Mtc3Vubnktb3V0bGluZVwiPjwvaT5cXFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cInZvbHVtZVwiIG1pbj1cIjBcIiBtYXg9XCIxMDBcIiBuZy1tb2RlbD1cImludGVuc2l0eVwiPlxcXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpb24taW9zLXN1bm55XCI+PC9pPlxcXG4gICAgICAgICAgICAgICAgPC9kaXY+J1xuICAgIH07XG4gIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5jb2xvcldoZWVsJywgW10pXG5cbiAgLmRpcmVjdGl2ZSgnY29sb3JXaGVlbCcsIGZ1bmN0aW9uICgkYW5pbWF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgc2NvcGU6IHsgY29sb3I6ICc9JywgaW1nOiAnQCcgfSxcbiAgICAgIHRlbXBsYXRlOic8ZGl2IHN0eWxlPVwiaGVpZ2h0OiAzMDBweDsgd2lkdGg6IDMwMHB4OyBtYXJnaW46IGF1dG87IHBvc2l0aW9uOiByZWxhdGl2ZTtcIj5cXFxuICAgICAgICAgICAgICAgICAgICA8Y2FudmFzIHZhcj1cIjFcIiB3aWR0aD1cIjMwMFwiIGhlaWdodD1cIjMwMFwiIG5nLWNsaWNrPVwiY29sb3JDbGljaygkZXZlbnQpXCI+PC9jYW52YXM+XFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1zdHlsZT1cIntcXCdiYWNrZ3JvdW5kLWNvbG9yXFwnOiBcXCdyZ2IoXFwnK2NvbG9yLnIrXFwnLFxcJytjb2xvci5nK1xcJyxcXCcrY29sb3IuYitcXCcpXFwnfVwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB0b3A6IDEyMHB4OyBsZWZ0OiAxMjBweDsgaGVpZ2h0OiA2MHB4OyB3aWR0aDogNjBweDsgYm9yZGVyLXJhZGl1czogNTAlOyBib3gtc2hhZG93OiAwIDJweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuNDYpOyB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMXM7IC13ZWJraXQtdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjFzXCI+PC9kaXY+XFxcbiAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBjdHggPSBlbGVtZW50LmNoaWxkcmVuKClbMF0uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50LmNoaWxkcmVuKClbMV0pO1xuXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgMzAwLCAzMDApOyAvLyBkcmF3IHRoZSBpbWFnZSBvbiB0aGUgY2FudmFzXG4gICAgICAgIH07XG5cbiAgICAgICAgaW1hZ2Uuc3JjID0gc2NvcGUuaW1nIHx8ICdpbWcvY29sb3Itd2hlZWwucG5nJztcblxuICAgICAgICB2YXIgYW5pbWF0ZUNsaWNrID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhzZWxlY3Rpb24sICdwdWxzZSBhbmltYXRlZC1xdWljaycpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUNsYXNzKCdwdWxzZSBhbmltYXRlZC1xdWljaycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLmNvbG9yQ2xpY2sgPSBmdW5jdGlvbihlKXtcbiAgICAgICAgICB2YXIgcGl4ZWwgPSBjdHguZ2V0SW1hZ2VEYXRhKGUub2Zmc2V0WCwgZS5vZmZzZXRZLCAxLCAxKS5kYXRhO1xuXG4gICAgICAgICAgaWYgKHBpeGVsWzNdICE9PSAwKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmNvcHkoe3I6IHBpeGVsWzBdLCBnOiBwaXhlbFsxXSwgYjogcGl4ZWxbMl19LCBzY29wZS5jb2xvcik7XG4gICAgICAgICAgICBhbmltYXRlQ2xpY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyVG91Y2hXaWRnZXRzLmRpcmVjdGl2ZXMnLFxuICAgIFtcbiAgICAgICAgJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5tb2RlU2VsZWN0b3InLFxuICAgICAgICAnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLmxpZ2h0RWRpdG9yJyxcbiAgICAgICAgJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5jb2xvcldoZWVsJyxcbiAgICAgICAgJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5jb2xvckludGVuc2l0eScsXG4gICAgICAgICdhbmd1bGFyVG91Y2hXaWRnZXRzLmRpcmVjdGl2ZXMuY2xvY2tFZGl0b3InLFxuICAgICAgICAnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLm1pbnV0ZXNFZGl0b3InLFxuICAgICAgICAnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLnRpbWVQaWNrZXInLFxuICAgICAgICAnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLm1pbnV0ZXNQaWNrZXInLFxuICAgICAgICAnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLnRoZXJtb21ldGVyJyxcbiAgICAgICAgJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5waE1ldGVyJyxcbiAgICAgICAgJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5vcnBNZXRlcicsXG4gICAgICAgICdhbmd1bGFyVG91Y2hXaWRnZXRzLmRpcmVjdGl2ZXMub25PZmZCdXR0b24nXG4gICAgXVxuKTtcblxuZnVuY3Rpb24gcmVndWxhckFyY0RhdGEoY3gsY3kscmFkaXVzLHN0YXJ0RGVncmVlcyxlbmREZWdyZWVzLGlzQ291bnRlckNsb2Nrd2lzZSl7XG5cbiAgICB2YXIgb2Zmc2V0UmFkaWFucz0wOyAgLy8gLU1hdGguUEkvMiBmb3IgMTIgbydjbG9ja1xuICAgIHZhciBzd2VlcEZsYWc9KGlzQ291bnRlckNsb2Nrd2lzZSk/MDoxO1xuICAgIHZhciBzdGFydFJhZGlhbnM9b2Zmc2V0UmFkaWFucytzdGFydERlZ3JlZXMqTWF0aC5QSS8xODA7XG4gICAgdmFyIGVuZFJhZGlhbnM9b2Zmc2V0UmFkaWFucytlbmREZWdyZWVzKk1hdGguUEkvMTgwO1xuICAgIHZhciBsYXJnZUFyYz0oIChlbmRSYWRpYW5zLXN0YXJ0UmFkaWFucykgJSAoMipNYXRoLlBJKSApID4gTWF0aC5QSSA/IDEgOiAwO1xuICAgIHZhciBzdGFydFg9KGN4K3JhZGl1cypNYXRoLmNvcyhzdGFydFJhZGlhbnMpKTtcbiAgICB2YXIgc3RhcnRZPShjeStyYWRpdXMqTWF0aC5zaW4oc3RhcnRSYWRpYW5zKSk7XG4gICAgdmFyIGVuZFg9ICAoY3grcmFkaXVzKk1hdGguY29zKGVuZFJhZGlhbnMpKTtcbiAgICB2YXIgZW5kWT0gIChjeStyYWRpdXMqTWF0aC5zaW4oZW5kUmFkaWFucykpO1xuICAgIHZhciBzcGFjZT1cIiBcIjtcbiAgICB2YXIgYXJjRGF0YT1cIlwiO1xuXG4gICAgYXJjRGF0YSs9XCJNXCIrc3BhY2Urc3RhcnRYK3NwYWNlK1xuICAgICAgICBzdGFydFkgICAgICAgICArc3BhY2U7XG4gICAgYXJjRGF0YSs9XCJBXCIrc3BhY2UrcmFkaXVzK3NwYWNlK1xuICAgICAgICByYWRpdXMgICAgICAgICArc3BhY2UrXG4gICAgICAgIG9mZnNldFJhZGlhbnMgICtzcGFjZStcbiAgICAgICAgbGFyZ2VBcmMgICAgICAgK3NwYWNlK1xuICAgICAgICBzd2VlcEZsYWcgICAgICArc3BhY2UrXG4gICAgICAgIGVuZFggICAgICAgICAgICtzcGFjZStcbiAgICAgICAgZW5kWTtcbiAgICByZXR1cm4oYXJjRGF0YSk7XG59XG5cbmZ1bmN0aW9uIHJlZ3VsYXJTZW1pQ2lyY2xlKGN4LGN5LHJhZGl1cyxzdGFydERlZ3JlZXMsZW5kRGVncmVlcyxpc0NvdW50ZXJDbG9ja3dpc2Upe1xuICAgIHZhciBzcGFjZT1cIiBcIjtcbiAgICB2YXIgYXJjRGF0YSA9IHJlZ3VsYXJBcmNEYXRhKGN4LGN5LHJhZGl1cyxzdGFydERlZ3JlZXMsZW5kRGVncmVlcy0wLjAwMDEsaXNDb3VudGVyQ2xvY2t3aXNlKTtcbiAgICBhcmNEYXRhICs9IFwiTFwiK3NwYWNlK2N4K3NwYWNlK2N5O1xuICAgIHJldHVybiBhcmNEYXRhO1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvbk9uQ2lyY2xlKGN4LGN5LHJhZGl1cyxkZWdyZWVzLGV4dHJhWCxleHRyYVkpe1xuXG4gICAgdmFyIG9mZnNldFJhZGlhbnM9MDsgIC8vIC1NYXRoLlBJLzIgZm9yIDEyIG8nY2xvY2tcbiAgICB2YXIgc3RhcnRSYWRpYW5zPW9mZnNldFJhZGlhbnMrZGVncmVlcypNYXRoLlBJLzE4MDtcbiAgICB2YXIgeD1wYXJzZUludChjeCsocmFkaXVzK2V4dHJhWCkqTWF0aC5jb3Moc3RhcnRSYWRpYW5zKSk7XG4gICAgdmFyIHk9cGFyc2VJbnQoY3krKHJhZGl1cytleHRyYVkpKk1hdGguc2luKHN0YXJ0UmFkaWFucykpO1xuXG4gICAgcmV0dXJuIHt4OiB4LCB5OiB5fTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWUpe1xuICAgIHZhciByID0gdGltZS5zcGxpdChcIjpcIik7XG4gICAgcmV0dXJuIHtob3VyczogcGFyc2VJbnQoclswXSksIG1pbnV0ZXM6IHBhcnNlSW50KHJbMV0pfTtcbn1cblxuZnVuY3Rpb24gZ2V0QW5nbGUoeTEsIHgxLCB5MiwgeDIpIHtcbiAgICB2YXIgdGFuZ2VudCA9ICh4MiAtIHgxKSAvICh5MiAtIHkxKTtcbiAgICB2YXIgYW5nID0gTWF0aC5hdGFuKHRhbmdlbnQpO1xuICAgIGlmICh5Mi15MSA8IDApIGFuZyArPSBNYXRoLlBJO1xuICAgIHJldHVybiBhbmcqMTgwL01hdGguUEkrOTA7XG59XG5cbmZ1bmN0aW9uIGdldE1vZHVsZSh4MSwgeTEsIHgyLCB5Mil7XG4gICAgdmFyIHg9IHgyIC0geDE7XG4gICAgdmFyIHk9IHkyIC0geTE7XG4gICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkpO1xuXG59XG4iLCJhbmd1bGFyLm1vZHVsZSgnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLmxpZ2h0RWRpdG9yJywgW10pXG5cbiAgICAuZGlyZWN0aXZlKCdsaWdodEVkaXRvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICBzY29wZTogeyBvbjogJz0nLCBtb2RlOiAnPScsIGNhblR1cm5PZmY6ICc9JywgaXNSZ2I6ICc9Jywgb25DbGljazogJyYnLCBtb2RlU3RhdGljOiAnPScsIG1vZGVBbmltYXRlZDogJz0nIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZTonICA8ZGl2IGNsYXNzPVwibGlnaHQtZWRpdG9yXCIgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmU7IGhlaWdodDogMjYwcHg7IHdpZHRoOiAyNDBweDtcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJmeC16b29tLW5vcm1hbFwiIGhlaWdodD1cIjI2MFwiIHdpZHRoPVwiMjQwXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7XCIgbmctc2hvdz1cIihvbiB8fCAhY2FuVHVybk9mZilcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVmcz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlciBpZD1cInNoYWRvdy17eyRpZH19XCIgeD1cIi0yMDAlXCIgeT1cIi0yMDAlXCIgd2lkdGg9XCI0NTAlXCIgaGVpZ2h0PVwiNDUwJVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlT2Zmc2V0IHJlc3VsdD1cIm9mZk91dFwiIGluPVwiU291cmNlR3JhcGhpY1wiIGR4PVwiMFwiIGR5PVwiMlwiPjwvZmVPZmZzZXQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVDb2xvck1hdHJpeCByZXN1bHQ9XCJtYXRyaXhPdXRcIiBpbj1cIm9mZk91dFwiIHR5cGU9XCJtYXRyaXhcIiB2YWx1ZXM9XCIwLjQgMCAwIDAgMCAwIDAuNCAwIDAgMCAwIDAgMC40IDAgMCAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwibWF0cml4T3V0XCIgc3RkRGV2aWF0aW9uPVwiMlwiPjwvZmVHYXVzc2lhbkJsdXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVCbGVuZCBpbj1cIlNvdXJjZUdyYXBoaWNcIiBpbjI9XCJibHVyT3V0XCIgbW9kZT1cIm5vcm1hbFwiPjwvZmVCbGVuZD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWx0ZXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJ0cmFuc3BhcmVudFwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2U9XCJ3aGl0ZVwiIHN0cm9rZS13aWR0aD1cIjIwXCIgZD1cIk0gNDcgMTk1IEEgMTA1IDEwNSAwIDEgMSAxODIgMTk1XCIgZmlsdGVyPVwidXJsKCNzaGFkb3cte3skaWR9fSlcIiBzdHJva2UgbmctY2xpY2s9XCJvbkNsaWNrKClcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cInRyYW5zcGFyZW50XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZT1cIiNjY2NcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0gNDcgMTk1IEEgMTA1IDEwNSAwIDEgMSAxODIgMTk1XCIgbmctY2xpY2s9XCJvbkNsaWNrKClcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xhc3M9XCJsaW5lLXNlbGVjdGlvblwiIGZpbGw9XCJ0cmFuc3BhcmVudFwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCI2XCIgbmctYXR0ci1kPVwie3sgYXJjIH19XCIgbmctY2xpY2s9XCJvbkNsaWNrKClcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJzaG93LWhpZGUtb3BhY2l0eSBuZy1oaWRlXCIgbmctc2hvdz1cImNhblR1cm5PZmZcIiBoZWlnaHQ9XCIyNjBcIiB3aWR0aD1cIjI0MFwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlO1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsdGVyIGlkPVwiYnV0dG9uLXNoYWRvdy17eyRpZH19XCIgeD1cIi0yMDAlXCIgeT1cIi0yMDAlXCIgd2lkdGg9XCI0NTAlXCIgaGVpZ2h0PVwiNDUwJVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlT2Zmc2V0IHJlc3VsdD1cIm9mZk91dFwiIGluPVwiU291cmNlR3JhcGhpY1wiIGR4PVwiMVwiIGR5PVwiNFwiPjwvZmVPZmZzZXQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVDb2xvck1hdHJpeCByZXN1bHQ9XCJtYXRyaXhPdXRcIiBpbj1cIm9mZk91dFwiIHR5cGU9XCJtYXRyaXhcIiB2YWx1ZXM9XCIwLjQgMCAwIDAgMCAwIDAuNCAwIDAgMCAwIDAgMC40IDAgMCAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwibWF0cml4T3V0XCIgc3RkRGV2aWF0aW9uPVwiMlwiPjwvZmVHYXVzc2lhbkJsdXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVCbGVuZCBpbj1cIlNvdXJjZUdyYXBoaWNcIiBpbjI9XCJibHVyT3V0XCIgbW9kZT1cIm5vcm1hbFwiPjwvZmVCbGVuZD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWx0ZXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIG5nLWNsaWNrPVwidG9nZ2xlKClcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xhc3M9XCJzaG93LWhpZGUtb3BhY2l0eSBidXR0b24tb24tc3ZnXCIgbmctaGlkZT1cIm9uXCIgZmlsbD1cInRyYW5zcGFyZW50XCIgc3Ryb2tlLXdpZHRoPVwiNDBcIiBkPVwiTSAxNjYgMjA0IEEgMTAzIDEwMyAwIDAgMSA2MyAyMDRcIiBmaWx0ZXI9XCJ1cmwoI2J1dHRvbi1zaGFkb3cte3skaWR9fSlcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGNsYXNzPVwic2hvdy1oaWRlLW9wYWNpdHkgYnV0dG9uLW9mZi1zdmdcIiBuZy1zaG93PVwib25cIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBzdHJva2Utd2lkdGg9XCI0MFwiIGQ9XCJNIDE2NiAyMDQgQSAxMDMgMTAzIDAgMCAxIDYzIDIwNFwiIGZpbHRlcj1cInVybCgjYnV0dG9uLXNoYWRvdy17eyRpZH19KVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJoZWlnaHQ6IDA7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiA0MXB4OyBsZWZ0OiAzOXB4O1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmeC1yb3RhdGUtY2xvY2sgcm91bmQtYnV0dG9uIGNlbnRlciBvdmVycmlkZSBidXR0b24tc2hhZG93IG5nLWhpZGVcIiBuZy1zaG93PVwiaXNSZ2IgJiYgKG9uIHx8ICFjYW5UdXJuT2ZmKSAmJiBtb2RlPT09XFwnc3RhdGljXFwnXCIgbmctc3R5bGU9XCJ7XFwnYmFja2dyb3VuZC1jb2xvclxcJzogXFwncmdiKFxcJyttb2RlU3RhdGljLmNvbG9yLnIrXFwnLFxcJyttb2RlU3RhdGljLmNvbG9yLmcrXFwnLFxcJyttb2RlU3RhdGljLmNvbG9yLmIrXFwnKVxcJ31cIiBuZy1jbGljaz1cIm9uQ2xpY2soKVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmeC1yb3RhdGUtY2xvY2sgcm91bmQtYnV0dG9uIGNlbnRlciBvdmVycmlkZSBidXR0b24tc2hhZG93IG5nLWhpZGVcIiBuZy1zaG93PVwiaXNSZ2IgJiYgKG9uIHx8ICFjYW5UdXJuT2ZmKSAmJiBtb2RlPT09XFwnYW5pbWF0aW9uXFwnXCIgc3R5bGU9XCJvdmVyZmxvdzogaGlkZGVuO1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZWQtY29sb3JcIiBzdHlsZT1cImhlaWdodDogMTAwJTsgd2lkdGg6IDEwMCU7XCIgbmctc3R5bGU9XCJ7XFwnLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb25cXCc6IG1vZGVBbmltYXRlZC5zcGVlZCtcXCdzXFwnLCBcXCdhbmltYXRpb24tZHVyYXRpb25cXCc6IG1vZGVBbmltYXRlZC5zcGVlZCtcXCdzXFwnLCBcXCctd2Via2l0LWFuaW1hdGlvbi1uYW1lXFwnOiBtb2RlQW5pbWF0ZWQuYW5pbWF0aW9uLCBcXCdhbmltYXRpb24tbmFtZVxcJzogbW9kZUFuaW1hdGVkLmFuaW1hdGlvbn1cIiBuZy1jbGljaz1cIm9uQ2xpY2soKVwiPjwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmeC1yb3RhdGUtY2xvY2sgcm91bmQtYnV0dG9uIGNlbnRlciBvdmVycmlkZSBidXR0b24tb24gYnV0dG9uLXNoYWRvdyBuZy1oaWRlXCIgbmctc2hvdz1cIiFpc1JnYiAmJiAob24gfHwgIWNhblR1cm5PZmYpXCIgc3R5bGU9XCJoZWlnaHQ6IDE1MHB4OyB3aWR0aDogMTUwcHg7XCIgbmctY2xpY2s9XCJvbkNsaWNrKClcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJmb250LXNpemU6IDQycHg7XCI+e3sgbW9kZVN0YXRpYy5pbnRlbnNpdHkgfX0lPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmeC1yb3RhdGUtY2xvY2sgcm91bmQtYnV0dG9uIGNlbnRlciBvdmVycmlkZSBidXR0b24tb2ZmIGJ1dHRvbi1zaGFkb3cgbmctaGlkZVwiIG5nLXNob3c9XCIhKG9uIHx8ICFjYW5UdXJuT2ZmKVwiIG5nLWNsaWNrPVwidG9nZ2xlKClcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJmb250LXNpemU6IDM0cHg7IGNvbG9yOiB3aGl0ZTtcIj5BcGFnYWRvPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2VudGVyIHNob3ctaGlkZS1vcGFjaXR5XCIgbmctc2hvdz1cImNhblR1cm5PZmZcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAxOTdweDsgbGVmdDogNjVweDsgaGVpZ2h0OiA0MHB4OyB3aWR0aDogMTAwcHg7XCIgbmctY2xpY2s9XCJ0b2dnbGUoKVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpb24tcG93ZXJcIiBzdHlsZT1cImNvbG9yOiB3aGl0ZTsgZm9udC1zaXplOiAyNnB4O1wiPjwvaT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlKXtcbiAgICAgICAgICAgICAgICBpZigkc2NvcGUub249PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub249dHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoJHNjb3BlLmNhblR1cm5PZmY9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuVHVybk9mZj10cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZigkc2NvcGUuaXNSZ2I9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNSZ2I9dHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1vZGUgPSAkc2NvcGUubW9kZSB8fCAnc3RhdGljJztcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9kZVN0YXRpYyA9ICRzY29wZS5tb2RlU3RhdGljIHx8IHtjb2xvcjoge3I6IDAsIGc6IDAsIGI6IDB9LCBpbnRlbnNpdHk6IDB9O1xuICAgICAgICAgICAgICAgICRzY29wZS5tb2RlQW5pbWF0ZWQgPSAkc2NvcGUubW9kZUFuaW1hdGVkIHx8IHthbmltYXRpb246IFwibW9kZTFcIiwgc3BlZWQ6IDF9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGRyYXdSYW5nZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCEkc2NvcGUuaXNSZ2IgfHwgJHNjb3BlLm1vZGU9PT0nc3RhdGljJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXJjID0gcmVndWxhckFyY0RhdGEoMTE1LDExNSwxMDUsMTMwLDEzNSsoJHNjb3BlLm1vZGVTdGF0aWMuaW50ZW5zaXR5ICogMi43NSksZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcmMgPSByZWd1bGFyQXJjRGF0YSgxMTUsMTE1LDEwNSwxMzAsMTM1Kygkc2NvcGUubW9kZUFuaW1hdGVkLnNwZWVkICogMjcuNSksZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGRyYXdSYW5nZSgpO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnbW9kZVN0YXRpYy5pbnRlbnNpdHknLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYW5nZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnbW9kZUFuaW1hdGVkLnNwZWVkJyxmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBkcmF3UmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ21vZGUnLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYW5nZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5vbj0gISRzY29wZS5vblxuICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5taW51dGVzRWRpdG9yJywgW10pXG5cbiAgICAuZGlyZWN0aXZlKCdtaW51dGVzRWRpdG9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxuICAgICAgICAgICAgc2NvcGU6IHsgdGltZTogJz0nLCBvbkNsaWNrOiAnJicgfSxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTonPGRpdj5cXFxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwiY2xvY2stZWRpdG9yXCIgaGVpZ2h0PVwiMjAwXCIgd2lkdGg9XCIyNDBcIiBuZy1jbGljaz1cIm9uQ2xpY2soKVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGVmcz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWx0ZXIgaWQ9XCJzaGFkb3cte3skaWR9fVwiIHg9XCItMjAwJVwiIHk9XCItMjAwJVwiIHdpZHRoPVwiNDUwJVwiIGhlaWdodD1cIjQ1MCVcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVPZmZzZXQgcmVzdWx0PVwib2ZmT3V0XCIgaW49XCJTb3VyY2VHcmFwaGljXCIgZHg9XCIwXCIgZHk9XCIyXCI+PC9mZU9mZnNldD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVDb2xvck1hdHJpeCByZXN1bHQ9XCJtYXRyaXhPdXRcIiBpbj1cIm9mZk91dFwiIHR5cGU9XCJtYXRyaXhcIiB2YWx1ZXM9XCIwLjQgMCAwIDAgMCAwIDAuNCAwIDAgMCAwIDAgMC40IDAgMCAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlR2F1c3NpYW5CbHVyIHJlc3VsdD1cImJsdXJPdXRcIiBpbj1cIm1hdHJpeE91dFwiIHN0ZERldmlhdGlvbj1cIjJcIj48L2ZlR2F1c3NpYW5CbHVyPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUJsZW5kIGluPVwiU291cmNlR3JhcGhpY1wiIGluMj1cImJsdXJPdXRcIiBtb2RlPVwibm9ybWFsXCI+PC9mZUJsZW5kPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWx0ZXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGVmcz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGcgZmlsdGVyPVwidXJsKCNzaGFkb3cte3skaWR9fSlcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgaWQ9XCJ0ZXN0XCIgY3g9XCIxMTVcIiBjeT1cIjEwMFwiIHI9XCI3MFwiIGZpbGw9XCJ3aGl0ZVwiPjwvY2lyY2xlPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xhc3M9XCJjb250ZW50LXNlbGVjdGlvblwiIG5nLWF0dHItZD1cInt7IHNlbWlDaXJjbGUgfX1cIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGlkPVwidGVzdFwiIGN4PVwiMTE1XCIgY3k9XCIxMDBcIiByPVwiNjVcIiBzdHJva2U9XCJ3aGl0ZVwiIGZpbGw9XCJ0cmFuc3BhcmVudFwiIHN0cm9rZS13aWR0aD1cIjhcIj48L2NpcmNsZT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgaWQ9XCJ0ZXN0XCIgY3g9XCIxMTVcIiBjeT1cIjEwMFwiIHI9XCI3MFwiIHN0cm9rZT1cImJsYWNrXCIgZmlsbD1cInRyYW5zcGFyZW50XCIgc3Ryb2tlLXdpZHRoPVwiNlwiPjwvY2lyY2xlPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxcbiAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlKXtcbiAgICAgICAgICAgICAgICB2YXIgZHJhd1JhbmdlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuZ2xlPS05MCsoJHNjb3BlLnRpbWUqNik7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW1pQ2lyY2xlID0gcmVndWxhclNlbWlDaXJjbGUoMTE1LDEwMCw3MCwtOTAsYW5nbGUsZmFsc2UpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBkcmF3UmFuZ2UoKTtcblxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ3RpbWUnLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYW5nZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5taW51dGVzUGlja2VyJywgW10pXG5cbiAgICAuZGlyZWN0aXZlKCdtaW51dGVzUGlja2VyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxuICAgICAgICAgICAgc2NvcGU6IHsgdGltZTogJz0nIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZTonPGRpdiBzdHlsZT1cIm1hcmdpbjogYXV0bzsgaGVpZ2h0OiAyNTBweDsgd2lkdGg6IDM1MHB4O1wiIG9uLWRyYWctc3RhcnQ9XCJvblRvdWNoKCRldmVudClcIiBvbi10b3VjaD1cIm9uVG91Y2goJGV2ZW50KVwiIG9uLWRyYWctZW5kPVwib25SZWxlYXNlKClcIiBvbi1kcmFnPVwiZHJhZygkZXZlbnQpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBpZD1cInRpbWUtcGlja2VyXCIgaGVpZ2h0PVwiMjUwXCIgd2lkdGg9XCIzNTBcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRlZnM+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsdGVyIGlkPVwic2hhZG93LXt7JGlkfX1cIiB4PVwiLTIwMCVcIiB5PVwiLTIwMCVcIiB3aWR0aD1cIjQ1MCVcIiBoZWlnaHQ9XCI0NTAlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlT2Zmc2V0IHJlc3VsdD1cIm9mZk91dFwiIGluPVwiU291cmNlR3JhcGhpY1wiIGR4PVwiMFwiIGR5PVwiMlwiPjwvZmVPZmZzZXQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlQ29sb3JNYXRyaXggcmVzdWx0PVwibWF0cml4T3V0XCIgaW49XCJvZmZPdXRcIiB0eXBlPVwibWF0cml4XCIgdmFsdWVzPVwiMC40IDAgMCAwIDAgMCAwLjQgMCAwIDAgMCAwIDAuNCAwIDAgMCAwIDAgMSAwXCI+PC9mZUNvbG9yTWF0cml4PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUdhdXNzaWFuQmx1ciByZXN1bHQ9XCJibHVyT3V0XCIgaW49XCJtYXRyaXhPdXRcIiBzdGREZXZpYXRpb249XCIyXCI+PC9mZUdhdXNzaWFuQmx1cj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVCbGVuZCBpbj1cIlNvdXJjZUdyYXBoaWNcIiBpbjI9XCJibHVyT3V0XCIgbW9kZT1cIm5vcm1hbFwiPjwvZmVCbGVuZD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmlsdGVyPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2RlZnM+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxnPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjE3NVwiIGN5PVwiMTI1XCIgcj1cIjEwMFwiIGZpbGw9XCJ3aGl0ZVwiPjwvY2lyY2xlPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiNlZWVcIiBkPVwiTSAxNzUgMjUgQSAxMDAgMTAwIDAgMCAxIDIyNSAzOEwgMTc1IDEyNVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gMjYxIDc1IEEgMTAwIDEwMCAwIDAgMSAyNzUgMTI1TCAxNzUgMTI1XCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiNlZWVcIiBkPVwiTSAyNjEgMTc1IEEgMTAwIDEwMCAwIDAgMSAyMjUgMjExTCAxNzUgMTI1XCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiNlZWVcIiBkPVwiTSAxNzUgMjI1IEEgMTAwIDEwMCAwIDAgMSAxMjUgMjExTCAxNzUgMTI1XCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiNlZWVcIiBkPVwiTSA4OCAxNzUgQSAxMDAgMTAwIDAgMCAxIDc1IDEyNUwgMTc1IDEyNVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gODggNzQgQSAxMDAgMTAwIDAgMCAxIDEyNCAzOEwgMTc1IDEyNVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBjbGFzcz1cImNvbnRlbnQtc2VsZWN0aW9uXCIgbmctYXR0ci1kPVwie3sgc2VtaUNpcmNsZSB9fVwiIGZpbHRlcj1cInVybCgjc2hhZG93LXt7JGlkfX0pXCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGlkPVwidGVzdFwiIGN4PVwiMTc1XCIgY3k9XCIxMjVcIiByPVwiMTAwXCIgc3Ryb2tlPVwiYmxhY2tcIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBzdHJva2Utd2lkdGg9XCI2XCIgZmlsdGVyPVwidXJsKCNzaGFkb3cte3skaWR9fSlcIj48L2NpcmNsZT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGcgZmlsbD1cIiM1NTVcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIxNjdcIiB5PVwiNDdcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjEwXCIgeT1cIjU3XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNVxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjI0MlwiIHk9XCI4OFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjUyXCIgeT1cIjEyOVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE1XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjQxXCIgeT1cIjE3MVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjEwXCIgeT1cIjIwM1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTY4XCIgeT1cIjIxNVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMwXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTI4XCIgeT1cIjIwM1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM1XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiOTZcIiB5PVwiMTcxXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCI4NVwiIHk9XCIxMjlcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0NVxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjk1XCIgeT1cIjg4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIxMjVcIiB5PVwiNTdcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1NVxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxcbiAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkaW9uaWNTY3JvbGxEZWxlZ2F0ZSl7XG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoaW5nPWZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRyYXdSYW5nZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmdsZT0tOTArKCRzY29wZS50aW1lKjYpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VtaUNpcmNsZSA9IHJlZ3VsYXJTZW1pQ2lyY2xlKDE3NSwxMjUsMTAwLC05MCxhbmdsZSxmYWxzZSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBjYWxjdWxlVGltZSA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdWNoPXt4OiBldmVudC5nZXN0dXJlLnNyY0V2ZW50LmxheWVyWCwgeTogZXZlbnQuZ2VzdHVyZS5zcmNFdmVudC5sYXllcll9O1xuICAgICAgICAgICAgICAgICAgICBpZih0b3VjaC55PDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2gueCArPSBldmVudC5nZXN0dXJlLnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoLnkgKz0gZXZlbnQuZ2VzdHVyZS50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbnRlclBvcz17eDogZXZlbnQuY3VycmVudFRhcmdldC5vZmZzZXRMZWZ0KzE3NSwgeTogZXZlbnQuY3VycmVudFRhcmdldC5vZmZzZXRUb3ArMTI1fTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5nbGU9Z2V0QW5nbGUoY2VudGVyUG9zLngsIGNlbnRlclBvcy55LCB0b3VjaC54LCB0b3VjaC55KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRpbWU9IHBhcnNlSW50KChhbmdsZSsyMCkgLyAzMCkgKiA1O1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUub25DbGljayA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgY2FsY3VsZVRpbWUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUub25Ub3VjaCA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hpbmc9dHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUuZnJlZXplQWxsU2Nyb2xscyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsY3VsZVRpbWUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUub25SZWxlYXNlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hpbmc9ZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRpb25pY1Njcm9sbERlbGVnYXRlLmZyZWV6ZUFsbFNjcm9sbHMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuZHJhZyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgaWYodG91Y2hpbmcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsZVRpbWUoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ3RpbWUnLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYW5nZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZHJhd1JhbmdlKCk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyVG91Y2hXaWRnZXRzLmRpcmVjdGl2ZXMubW9kZVNlbGVjdG9yJywgW10pXG5cbiAgLmRpcmVjdGl2ZSgnbW9kZVNlbGVjdG9yJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICBzY29wZTogeyBtb2RlczogJz0nLCBzZWxlY3RlZE1vZGU6ICc9JyB9LFxuICAgICAgdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJtb2RlLXNlbGVjdG9yXCIgbmctY2xhc3M9XCJzZWxlY3RlZE1vZGVcIiBzdHlsZT1cImhlaWdodDogMjZweDsgd2lkdGg6IDI1MHB4OyBmbG9hdDogcmlnaHQ7IG1hcmdpbjogMTBweCAxMHB4IDEwcHggMFwiIG5nLWNsaWNrPVwiY2hhbmdlTW9kZSgpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImhlaWdodDogMTAwJTsgd2lkdGg6IDEwMCU7IHRyYW5zZm9ybTogdHJhbnNsYXRlKDExMnB4KTsgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMTJweClcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1jbGljaz1cImNoYW5nZU1vZGUoKVwiIGNsYXNzPVwiYnV0dG9uLXNoYWRvd1wiIHN0eWxlPVwib3ZlcmZsb3c6IGhpZGRlbjsgcG9zaXRpb246IGFic29sdXRlOyB3aWR0aDogNDBweDtoZWlnaHQ6IDQwcHg7IGJvcmRlci1yYWRpdXM6IDIwcHg7IHRyYW5zZm9ybTogdHJhbnNsYXRlKDEyNXB4KTsgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMjVweCk7IG1hcmdpbi1sZWZ0OiAtMTdweDsgbWFyZ2luLXRvcDogLTZweDtcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RlLXNlbGVjdG9yLWJvdHRvbiBiYWNrZ3JvdW5kLWFuaW1hdGlvblwiIHN0eWxlPVwiaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJTtcIj48L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmFuc2Zvcm0tYW5pbWF0aW9uXCIgc3R5bGU9XCJoZWlnaHQ6IDEwMCU7IHdpZHRoOiAxMDAlOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDtcIiBuZy1zdHlsZT1cInt0cmFuc2Zvcm06IFxcJ3JvdGF0ZShcXCcrIHNob3dNb2RlICogKC0zNjAgLyBtb2Rlcy5sZW5ndGgpK1xcJ2RlZylcXCcsIFxcJy13ZWJraXQtdHJhbnNmb3JtXFwnOiBcXCdyb3RhdGUoXFwnKyBzaG93TW9kZSAqICgtMzYwIC8gbW9kZXMubGVuZ3RoKStcXCdkZWcpXFwnfVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJtb2RlIGluIG1vZGVzXCIgY2xhc3M9XCJzaG93LWhpZGUtb3BhY2l0eVwiIG5nLXN0eWxlPVwie3RyYW5zZm9ybTogXFwncm90YXRlKFxcJysgJGluZGV4ICogKDM2MCAvIG1vZGVzLmxlbmd0aCkgK1xcJ2RlZykgdHJhbnNsYXRlKC0xMjVweClcXCcsIFxcJy13ZWJraXQtdHJhbnNmb3JtXFwnOiBcXCdyb3RhdGUoXFwnKyAkaW5kZXggKiAoMzYwIC8gbW9kZXMubGVuZ3RoKSArXFwnZGVnKSB0cmFuc2xhdGUoLTEyNXB4KVxcJ31cIiBzdHlsZT1cIndpZHRoOiAyNTBweDsgaGVpZ2h0OiAyNnB4OyB0ZXh0LWFsaWduOiBlbmQ7IHBvc2l0aW9uOiBhYnNvbHV0ZTtcIiBuZy1zaG93PVwiY3VycmVudE1vZGU9PSRpbmRleFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAyMHB4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IG1vZGUuZGlzcGxheSB9fVxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImljb24ge3sgbW9kZS5uYW1lIH19LWFwcC1pY29uXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IC0xNXB4OyBmb250LXNpemU6IDMwcHg7IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XCI+PC9pPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgPC9kaXY+JyxcbiAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSl7XG5cbiAgICAgICAgdmFyIGdldE51bWJlck9mTW9kZSA9IGZ1bmN0aW9uKHNlbGVjdGVkTW9kZSl7XG4gICAgICAgICAgdmFyIG1vZGVzTmFtZXMgPSBbXTtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLm1vZGVzLCBmdW5jdGlvbihtb2RlKSB7XG4gICAgICAgICAgICBtb2Rlc05hbWVzLnB1c2gobW9kZS5uYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgaW5kZXggPSBtb2Rlc05hbWVzLmluZGV4T2Yoc2VsZWN0ZWRNb2RlKTtcbiAgICAgICAgICBpZihpbmRleCA9PSAtMSl7XG4gICAgICAgICAgICBpbmRleD0wO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNob3dNb2RlID0gJHNjb3BlLmN1cnJlbnRNb2RlID0gZ2V0TnVtYmVyT2ZNb2RlKCRzY29wZS5zZWxlY3RlZE1vZGUpO1xuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNb2RlID0gJHNjb3BlLm1vZGVzWyRzY29wZS5jdXJyZW50TW9kZV0ubmFtZTtcblxuICAgICAgICAkc2NvcGUuY2hhbmdlTW9kZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgJHNjb3BlLnNob3dNb2RlID0gJHNjb3BlLnNob3dNb2RlICsgMTtcbiAgICAgICAgICAkc2NvcGUuY3VycmVudE1vZGUgPSAkc2NvcGUuc2hvd01vZGUgJSAkc2NvcGUubW9kZXMubGVuZ3RoO1xuICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1vZGUgPSAkc2NvcGUubW9kZXNbJHNjb3BlLmN1cnJlbnRNb2RlXS5uYW1lO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5vbk9mZkJ1dHRvbicsIFtdKVxuXG4gICAgLmRpcmVjdGl2ZSgnb25PZmZCdXR0b24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgc2NvcGU6IHsgdmFsdWU6ICc9JyB9LFxuICAgICAgICAgICAgdGVtcGxhdGU6JyAgPGRpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvbi1vZmYtYnV0dG9uXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBoZWlnaHQ9XCIyNjBcIiB3aWR0aD1cIjIzMFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVmcz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWx0ZXIgaWQ9XCJidXR0b24tc2hhZG93LXt7JGlkfX1cIiB4PVwiLTIwMCVcIiB5PVwiLTIwMCVcIiB3aWR0aD1cIjQ1MCVcIiBoZWlnaHQ9XCI0NTAlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlT2Zmc2V0IHJlc3VsdD1cIm9mZk91dFwiIGluPVwiU291cmNlR3JhcGhpY1wiIGR4PVwiMVwiIGR5PVwiNFwiPjwvZmVPZmZzZXQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlQ29sb3JNYXRyaXggcmVzdWx0PVwibWF0cml4T3V0XCIgaW49XCJvZmZPdXRcIiB0eXBlPVwibWF0cml4XCIgdmFsdWVzPVwiMC40IDAgMCAwIDAgMCAwLjQgMCAwIDAgMCAwIDAuNCAwIDAgMCAwIDAgMSAwXCI+PC9mZUNvbG9yTWF0cml4PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUdhdXNzaWFuQmx1ciByZXN1bHQ9XCJibHVyT3V0XCIgaW49XCJtYXRyaXhPdXRcIiBzdGREZXZpYXRpb249XCIyXCI+PC9mZUdhdXNzaWFuQmx1cj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVCbGVuZCBpbj1cIlNvdXJjZUdyYXBoaWNcIiBpbjI9XCJibHVyT3V0XCIgbW9kZT1cIm5vcm1hbFwiPjwvZmVCbGVuZD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmlsdGVyPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RlZnM+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIG5nLWNsaWNrPVwidG9nZ2xlKClcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGNsYXNzPVwic2hvdy1oaWRlLW9wYWNpdHkgYnV0dG9uLW9uLXN2Z1wiIG5nLWhpZGU9XCJ2YWx1ZVwiIGZpbGw9XCJ0cmFuc3BhcmVudFwiIHN0cm9rZS13aWR0aD1cIjQwXCIgZD1cIk0gMTY2IDIwNCBBIDEwMyAxMDMgMCAwIDEgNjMgMjA0XCIgZmlsdGVyPVwidXJsKCNidXR0b24tc2hhZG93LXt7JGlkfX0pXCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xhc3M9XCJzaG93LWhpZGUtb3BhY2l0eSBidXR0b24tb2ZmLXN2Z1wiIG5nLXNob3c9XCJ2YWx1ZVwiIGZpbGw9XCJ0cmFuc3BhcmVudFwiIHN0cm9rZS13aWR0aD1cIjQwXCIgZD1cIk0gMTY2IDIwNCBBIDEwMyAxMDMgMCAwIDEgNjMgMjA0XCIgZmlsdGVyPVwidXJsKCNidXR0b24tc2hhZG93LXt7JGlkfX0pXCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNlbnRlclwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB0b3A6IDE5N3B4OyBsZWZ0OiA2NXB4OyBoZWlnaHQ6IDQwcHg7IHdpZHRoOiAxMDBweDtcIiBuZy1jbGljaz1cInRvZ2dsZSgpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpb24tcG93ZXJcIiBzdHlsZT1cImNvbG9yOiB3aGl0ZTsgZm9udC1zaXplOiAyNnB4O1wiPjwvaT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB0b3A6IDQxcHg7IGxlZnQ6IDM5cHg7XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmeC1yb3RhdGUtY2xvY2sgcm91bmQtYnV0dG9uIGNlbnRlciBvdmVycmlkZSBidXR0b24tb2ZmIGJ1dHRvbi1zaGFkb3dcIiBuZy1oaWRlPVwidmFsdWVcIiBuZy1jbGljaz1cInRvZ2dsZSgpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMzRweDsgY29sb3I6IHdoaXRlO1wiPkFwYWdhZG88L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZngtcm90YXRlLWNsb2NrIHJvdW5kLWJ1dHRvbiBjZW50ZXIgb3ZlcnJpZGUgYnV0dG9uLW9uIGJ1dHRvbi1zaGFkb3dcIiBuZy1zaG93PVwidmFsdWVcIiBuZy1jbGljaz1cInRvZ2dsZSgpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMzBweDtcIj5FbmNlbmRpZG88L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUpe1xuICAgICAgICAgICAgICAgICRzY29wZS50b2dnbGUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSAhJHNjb3BlLnZhbHVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLm9ycE1ldGVyJywgW10pXG5cbiAgLmRpcmVjdGl2ZSgnb3JwTWV0ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgIHNjb3BlOiB7IG9ycDogJz0nIH0sXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJtZXRlclwiPlxcXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgaGVpZ2h0PVwiMzIwXCIgd2lkdGg9XCIxMjBcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAyMHB4O1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGVmcz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjbGlwUGF0aCBpZD1cIm9ycENsaXBQYXRoXCIgY2xpcFBhdGhVbml0cz1cInVzZXJTcGFjZU9uVXNlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMwMFwiIHJ5PVwiMTZcIiB5PVwiMTBcIiB4PVwiMzBcIiBzdHJva2U9XCJibGFja1wiIGZpbGw9XCJ0cmFuc3BhcmVudFwiIHN0cm9rZS13aWR0aD1cIjZcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NsaXBQYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwib3JwQ2xpcFBhdGgyXCIgY2xpcFBhdGhVbml0cz1cInVzZXJTcGFjZU9uVXNlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjYwXCIgeT1cIjEzMFwiIHg9XCIwXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCI2MFwiIHk9XCIxMzBcIiB4PVwiNzJcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NsaXBQYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlciBpZD1cInNoYWRvdy17eyRpZH19XCIgeD1cIi0yMDAlXCIgeT1cIi0yMDAlXCIgd2lkdGg9XCI0NTAlXCIgaGVpZ2h0PVwiNDUwJVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZU9mZnNldCByZXN1bHQ9XCJvZmZPdXRcIiBpbj1cIlNvdXJjZUdyYXBoaWNcIiBkeD1cIjBcIiBkeT1cIjJcIj48L2ZlT2Zmc2V0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUNvbG9yTWF0cml4IHJlc3VsdD1cIm1hdHJpeE91dFwiIGluPVwib2ZmT3V0XCIgdHlwZT1cIm1hdHJpeFwiIHZhbHVlcz1cIjAuNCAwIDAgMCAwIDAgMC40IDAgMCAwIDAgMCAwLjQgMCAwIDAgMCAwIDEgMFwiPjwvZmVDb2xvck1hdHJpeD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwibWF0cml4T3V0XCIgc3RkRGV2aWF0aW9uPVwiMlwiPjwvZmVHYXVzc2lhbkJsdXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlQmxlbmQgaW49XCJTb3VyY2VHcmFwaGljXCIgaW4yPVwiYmx1ck91dFwiIG1vZGU9XCJub3JtYWxcIj48L2ZlQmxlbmQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpbHRlcj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZyBmaWx0ZXI9XCJ1cmwoI3NoYWRvdy17eyRpZH19KVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCI4MlwiIGhlaWdodD1cIjUwXCIgeT1cIjEzNVwiIHg9XCI1XCIgZmlsbD1cInRyYW5zcGFyZW50XCIgc3Ryb2tlPVwiIzBGMFwiIHN0cm9rZS13aWR0aD1cIjRcIiBjbGlwLXBhdGg9XCJ1cmwoI29ycENsaXBQYXRoMilcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoI29ycENsaXBQYXRoKVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCI0M1wiIHk9XCIxMFwiIHg9XCIzMFwiIGZpbGw9XCIjRkJGQTRGXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCI0M1wiIHk9XCI1M1wiIHg9XCIzMFwiIGZpbGw9XCIjRjlGOTQ0XCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCI0M1wiIHk9XCI5NlwiIHg9XCIzMFwiIGZpbGw9XCIjRDlGNTMxXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCI0M1wiIHk9XCIxMzlcIiB4PVwiMzBcIiBmaWxsPVwiI0E1RTkzOVwiPjwvcmVjdD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiNDNcIiB5PVwiMTgyXCIgeD1cIjMwXCIgZmlsbD1cIiM2OEQ2MkVcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjQzXCIgeT1cIjIyNVwiIHg9XCIzMFwiIGZpbGw9XCIjMkNCRDM0XCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCI0M1wiIHk9XCIyNjhcIiB4PVwiMzBcIiBmaWxsPVwiIzI5N0MzN1wiPjwvcmVjdD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMDBcIiByeT1cIjE2XCIgeT1cIjEwXCIgeD1cIjMwXCIgc3Ryb2tlPVwiYmxhY2tcIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBzdHJva2Utd2lkdGg9XCI2XCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxnIG5nLWF0dHItdHJhbnNmb3JtPVwidHJhbnNsYXRlKDI4LHt7cG9zWX19KVwiIGZpbHRlcj1cInVybCgjc2hhZG93LXt7JGlkfX0pXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwtMTMpXCIgZmlsbD1cIiNmMDBcIiBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNODQuMzAyMiwyMi4zMTA2IEM4NC4yNDczLDMzLjQ5MjYgNzUuMTM5Miw0Mi41MTE1IDYzLjk1NzEsNDIuNDU2NSBDNTkuMTU3LDQyLjQzMjkgNTQuNTAyOSw0MS4wMjI0IDUxLjI5OCwzNy45Mjk2IEM0NS4wMTg1LDMxLjg3IDM1LjAyMjEsMjUuNjkyNyA4LjA4MDgsMjQuMTYxNyBDNy4xMDA2NywyNC4xMDYgNS4wMjUxNSwyMy45MTYgNS4wNDksMjIuMDEyMSBDNS4wNzI4MywyMC4xMDk1IDcuMTM4MTgsMTkuODg3NCA4LjExNjkzLDE5LjgzNzggQzM1LjA3MjUsMTguNDcxNCA0NS4zMzExLDEyLjM4NiA1MS40NTMxLDYuMzY3ODMgQzU0LjYyOTEsMy4yNDU2NSA1OS4zNTU3LDEuOTQyMDIgNjQuMTU2MiwxLjk2NTYxIEM3NS4zMzgsMi4wMjA1OCA4NC4zNTcyLDExLjEzMTYgODQuMzAyMiwyMi4zMTA2IFpcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiNDVcIiB5PVwiMTZcIiBmb250LXNpemU9XCIyMlwiIGZpbGw9XCJ3aGl0ZVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IG9ycF90ZXh0IH19XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXFxuICAgICAgICAgICAgICAgIDwvZGl2PicsXG4gICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUpe1xuICAgICAgICAgICRzY29wZS4kd2F0Y2goJ29ycCcsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJHNjb3BlLnBvc1kgPSAoTWF0aC5sb2coJHNjb3BlLm9ycCkvTWF0aC5MTjIrMykqKDMwMC83KSsyMTtcbiAgICAgICAgICAgICAgJHNjb3BlLm9ycF90ZXh0ID0gJHNjb3BlLm9ycC50b0ZpeGVkKDEpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy5waE1ldGVyJywgW10pXG5cbiAgLmRpcmVjdGl2ZSgncGhNZXRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxuICAgICAgc2NvcGU6IHsgcGg6ICc9JyB9LFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlOic8ZGl2IGNsYXNzPVwibWV0ZXJcIj5cXFxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGhlaWdodD1cIjMyMFwiIHdpZHRoPVwiMTIwXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMjBweDtcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRlZnM+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJwaENsaXBQYXRoXCIgY2xpcFBhdGhVbml0cz1cInVzZXJTcGFjZU9uVXNlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMwMFwiIHJ5PVwiMTZcIiB5PVwiMTBcIiB4PVwiMzBcIiBzdHJva2U9XCJibGFja1wiIGZpbGw9XCJ0cmFuc3BhcmVudFwiIHN0cm9rZS13aWR0aD1cIjZcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NsaXBQYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwicGhDbGlwUGF0aDJcIiBjbGlwUGF0aFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiNjBcIiB5PVwiMTMwXCIgeD1cIjBcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjYwXCIgeT1cIjEzMFwiIHg9XCI3MlwiPjwvcmVjdD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2xpcFBhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsdGVyIGlkPVwic2hhZG93LXt7JGlkfX1cIiB4PVwiLTIwMCVcIiB5PVwiLTIwMCVcIiB3aWR0aD1cIjQ1MCVcIiBoZWlnaHQ9XCI0NTAlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlT2Zmc2V0IHJlc3VsdD1cIm9mZk91dFwiIGluPVwiU291cmNlR3JhcGhpY1wiIGR4PVwiMFwiIGR5PVwiMlwiPjwvZmVPZmZzZXQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlQ29sb3JNYXRyaXggcmVzdWx0PVwibWF0cml4T3V0XCIgaW49XCJvZmZPdXRcIiB0eXBlPVwibWF0cml4XCIgdmFsdWVzPVwiMC40IDAgMCAwIDAgMCAwLjQgMCAwIDAgMCAwIDAuNCAwIDAgMCAwIDAgMSAwXCI+PC9mZUNvbG9yTWF0cml4PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUdhdXNzaWFuQmx1ciByZXN1bHQ9XCJibHVyT3V0XCIgaW49XCJtYXRyaXhPdXRcIiBzdGREZXZpYXRpb249XCIyXCI+PC9mZUdhdXNzaWFuQmx1cj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVCbGVuZCBpbj1cIlNvdXJjZUdyYXBoaWNcIiBpbjI9XCJibHVyT3V0XCIgbW9kZT1cIm5vcm1hbFwiPjwvZmVCbGVuZD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmlsdGVyPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2RlZnM+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxnIGZpbHRlcj1cInVybCgjc2hhZG93LXt7JGlkfX0pXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjgyXCIgaGVpZ2h0PVwiNTBcIiB5PVwiMTM1XCIgeD1cIjVcIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBzdHJva2U9XCIjMEYwXCIgc3Ryb2tlLXdpZHRoPVwiNFwiIGNsaXAtcGF0aD1cInVybCgjcGhDbGlwUGF0aDIpXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgY2xpcC1wYXRoPVwidXJsKCNwaENsaXBQYXRoKVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCIxMFwiIHg9XCIzMFwiIGZpbGw9XCIjQ0UyMzFDXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCIzMFwiIHg9XCIzMFwiIGZpbGw9XCIjRTEzMzJDXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCI1MFwiIHg9XCIzMFwiIGZpbGw9XCIjRUM2NzJFXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCI3MFwiIHg9XCIzMFwiIGZpbGw9XCIjRjM5MTJDXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCI5MFwiIHg9XCIzMFwiIGZpbGw9XCIjRjRBRTJBXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCIxMTBcIiB4PVwiMzBcIiBmaWxsPVwiI0YxRTgxRlwiPjwvcmVjdD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMjBcIiB5PVwiMTMwXCIgeD1cIjMwXCIgZmlsbD1cIiNENkQ1MkRcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjIwXCIgeT1cIjE1MFwiIHg9XCIzMFwiIGZpbGw9XCIjODRCQjNCXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCIxNzBcIiB4PVwiMzBcIiBmaWxsPVwiIzI5QTM0MFwiPjwvcmVjdD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMjBcIiB5PVwiMTkwXCIgeD1cIjMwXCIgZmlsbD1cIiMxMTkxNDdcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjIwXCIgeT1cIjIxMFwiIHg9XCIzMFwiIGZpbGw9XCIjMUU4MDczXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCIyMzBcIiB4PVwiMzBcIiBmaWxsPVwiIzNCNUY5RFwiPjwvcmVjdD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMjBcIiB5PVwiMjUwXCIgeD1cIjMwXCIgZmlsbD1cIiMzODQ1NzlcIj48L3JlY3Q+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjIwXCIgeT1cIjI3MFwiIHg9XCIzMFwiIGZpbGw9XCIjM0YyQjZBXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIyMFwiIHk9XCIyOTBcIiB4PVwiMzBcIiBmaWxsPVwiIzM0MjU1MFwiPjwvcmVjdD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMDBcIiByeT1cIjE2XCIgeT1cIjEwXCIgeD1cIjMwXCIgc3Ryb2tlPVwiYmxhY2tcIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBzdHJva2Utd2lkdGg9XCI2XCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxnIG5nLWF0dHItdHJhbnNmb3JtPVwidHJhbnNsYXRlKDI4LHt7cG9zWX19KVwiIGZpbHRlcj1cInVybCgjc2hhZG93LXt7JGlkfX0pXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwtMTMpXCIgZmlsbD1cIiNmMDBcIiBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNODQuMzAyMiwyMi4zMTA2IEM4NC4yNDczLDMzLjQ5MjYgNzUuMTM5Miw0Mi41MTE1IDYzLjk1NzEsNDIuNDU2NSBDNTkuMTU3LDQyLjQzMjkgNTQuNTAyOSw0MS4wMjI0IDUxLjI5OCwzNy45Mjk2IEM0NS4wMTg1LDMxLjg3IDM1LjAyMjEsMjUuNjkyNyA4LjA4MDgsMjQuMTYxNyBDNy4xMDA2NywyNC4xMDYgNS4wMjUxNSwyMy45MTYgNS4wNDksMjIuMDEyMSBDNS4wNzI4MywyMC4xMDk1IDcuMTM4MTgsMTkuODg3NCA4LjExNjkzLDE5LjgzNzggQzM1LjA3MjUsMTguNDcxNCA0NS4zMzExLDEyLjM4NiA1MS40NTMxLDYuMzY3ODMgQzU0LjYyOTEsMy4yNDU2NSA1OS4zNTU3LDEuOTQyMDIgNjQuMTU2MiwxLjk2NTYxIEM3NS4zMzgsMi4wMjA1OCA4NC4zNTcyLDExLjEzMTYgODQuMzAyMiwyMi4zMTA2IFpcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiNDVcIiB5PVwiMTZcIiBmb250LXNpemU9XCIyMlwiIGZpbGw9XCJ3aGl0ZVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHBoX3RleHQgfX1cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxcXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcXG4gICAgICAgICAgICAgICAgPC9kaXY+JyxcbiAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSl7XG4gICAgICAgICAgJHNjb3BlLiR3YXRjaCgncGgnLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICRzY29wZS5wb3NZID0gKCRzY29wZS5waCkqKDMwMC8xNSkrMTA7XG4gICAgICAgICAgICAgICRzY29wZS5waF90ZXh0ID0gJHNjb3BlLnBoLnRvRml4ZWQoMSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYW5ndWxhclRvdWNoV2lkZ2V0cy5kaXJlY3RpdmVzLnRoZXJtb21ldGVyJywgW10pXG5cbiAgICAuZGlyZWN0aXZlKCd0aGVybW9tZXRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgICAgIHNjb3BlOiB7IGFjdHVhbFRlbXA6ICc9Jywgc2V0VGVtcDogJz0nLCBzaG93QWN0dWFsOiAnPScgfSxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTonICA8c3ZnIHdpZHRoPVwiMTcwXCIgaGVpZ2h0PVwiMzAwXCIgb24tdGFwPVwib25UYXAoJGV2ZW50KVwiIG9uLWRyYWctc3RhcnQ9XCJvblRvdWNoKCRldmVudClcIiBvbi1kcmFnLWVuZD1cIm9uUmVsZWFzZSgpXCIgb24tZHJhZz1cImRyYWcoJGV2ZW50KVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlZnM+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwidGhlcm1vbWV0ZXJDbGlwUGF0aFwiIGNsaXBQYXRoVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTU0LjkzMyw3LjY5NjIzIEM0MC45MzYsNy42OTYyMyAyOS42MzksMTkuMTIwMiAyOS42MzksMzMuMzMyMiBMMjkuNjM5LDE4My4zMDYgQzI5LjYzOSwxODMuMzUyIDI5LjYzOCwxODMuMzk2IDI5LjYzOSwxODMuNDQzIEMxNi4wNTcsMTkyLjAzMSA3LDIwNy4zMSA3LDIyNC43NTIgQzcsMjUxLjYyMyAyOC40NjYsMjczLjQxNyA1NC45MzMsMjczLjQxNyBDODEuNCwyNzMuNDE3IDEwMi44NjcsMjUxLjYyMyAxMDIuODY3LDIyNC43NTIgQzEwMi44NjcsMjA3LjI5NiA5My43ODMsMTkyLjAyOCA4MC4xODMsMTgzLjQ0MyBDODAuMTgzLDE4My4zOTYgODAuMTgzLDE4My4zNTIgODAuMTgzLDE4My4zMDYgTDgwLjE4MywzMy4zMzIyIEM4MC4xODMsMTkuMTIwMiA2OC45MzEsNy42OTYyMyA1NC45MzMsNy42OTYyMyBaXCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2xpcFBhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlciBpZD1cInNoYWRvdy17eyRpZH19XCIgeD1cIi0yMDAlXCIgeT1cIi0yMDAlXCIgd2lkdGg9XCI0NTAlXCIgaGVpZ2h0PVwiNDUwJVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVPZmZzZXQgcmVzdWx0PVwib2ZmT3V0XCIgaW49XCJTb3VyY2VHcmFwaGljXCIgZHg9XCIwXCIgZHk9XCIyXCI+PC9mZU9mZnNldD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlQ29sb3JNYXRyaXggcmVzdWx0PVwibWF0cml4T3V0XCIgaW49XCJvZmZPdXRcIiB0eXBlPVwibWF0cml4XCIgdmFsdWVzPVwiMC40IDAgMCAwIDAgMCAwLjQgMCAwIDAgMCAwIDAuNCAwIDAgMCAwIDAgMSAwXCI+PC9mZUNvbG9yTWF0cml4PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwibWF0cml4T3V0XCIgc3RkRGV2aWF0aW9uPVwiMlwiPjwvZmVHYXVzc2lhbkJsdXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUJsZW5kIGluPVwiU291cmNlR3JhcGhpY1wiIGluMj1cImJsdXJPdXRcIiBtb2RlPVwibm9ybWFsXCI+PC9mZUJsZW5kPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmlsdGVyPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgZmlsdGVyPVwidXJsKCNzaGFkb3cte3skaWR9fSlcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoI3RoZXJtb21ldGVyQ2xpcFBhdGgpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IGhlaWdodD1cIjMwMFwiIHdpZHRoPVwiMTMwXCIgZmlsbD1cIndoaXRlXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCBjbGFzcz1cImNvbnRlbnQtc2VsZWN0aW9uXCIgaGVpZ2h0PVwiMzAwXCIgd2lkdGg9XCIxMzBcIiBuZy1hdHRyLXk9XCJ7eyBzZXRUZW1wWVBvc2l0aW9uIH19XCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCBjbGFzcz1cInNlY29uZGFyeS1jb250ZW50LXNlbGVjdGlvblwiIGhlaWdodD1cIjMwMFwiIHdpZHRoPVwiMTMwXCIgbmctYXR0ci15PVwie3sgYWN0dWFsVGVtcFlQb3NpdGlvbiB9fVwiIG5nLXNob3c9XCJhY3R1YWxUZW1wXCI+PC9yZWN0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwibm9uZVwiIHN0cm9rZT1cIndoaXRlXCIgc3Ryb2tlLXdpZHRoPVwiMThcIiBzdHJva2UtbWl0ZXJsaW1pdD1cIjRcIiBkPVwiTTU0LjkzMyw3LjY5NjIzIEM0MC45MzYsNy42OTYyMyAyOS42MzksMTkuMTIwMiAyOS42MzksMzMuMzMyMiBMMjkuNjM5LDE4My4zMDYgQzI5LjYzOSwxODMuMzUyIDI5LjYzOCwxODMuMzk2IDI5LjYzOSwxODMuNDQzIEMxNi4wNTcsMTkyLjAzMSA3LDIwNy4zMSA3LDIyNC43NTIgQzcsMjUxLjYyMyAyOC40NjYsMjczLjQxNyA1NC45MzMsMjczLjQxNyBDODEuNCwyNzMuNDE3IDEwMi44NjcsMjUxLjYyMyAxMDIuODY3LDIyNC43NTIgQzEwMi44NjcsMjA3LjI5NiA5My43ODMsMTkyLjAyOCA4MC4xODMsMTgzLjQ0MyBDODAuMTgzLDE4My4zOTYgODAuMTgzLDE4My4zNTIgODAuMTgzLDE4My4zMDYgTDgwLjE4MywzMy4zMzIyIEM4MC4xODMsMTkuMTIwMiA2OC45MzEsNy42OTYyMyA1NC45MzMsNy42OTYyMyBaXCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImJsYWNrXCIgc3Ryb2tlLXdpZHRoPVwiNlwiIHN0cm9rZS1taXRlcmxpbWl0PVwiNFwiIGQ9XCJNNTQuOTMzLDcuNjk2MjMgQzQwLjkzNiw3LjY5NjIzIDI5LjYzOSwxOS4xMjAyIDI5LjYzOSwzMy4zMzIyIEwyOS42MzksMTgzLjMwNiBDMjkuNjM5LDE4My4zNTIgMjkuNjM4LDE4My4zOTYgMjkuNjM5LDE4My40NDMgQzE2LjA1NywxOTIuMDMxIDcsMjA3LjMxIDcsMjI0Ljc1MiBDNywyNTEuNjIzIDI4LjQ2NiwyNzMuNDE3IDU0LjkzMywyNzMuNDE3IEM4MS40LDI3My40MTcgMTAyLjg2NywyNTEuNjIzIDEwMi44NjcsMjI0Ljc1MiBDMTAyLjg2NywyMDcuMjk2IDkzLjc4MywxOTIuMDI4IDgwLjE4MywxODMuNDQzIEM4MC4xODMsMTgzLjM5NiA4MC4xODMsMTgzLjM1MiA4MC4xODMsMTgzLjMwNiBMODAuMTgzLDMzLjMzMjIgQzgwLjE4MywxOS4xMjAyIDY4LjkzMSw3LjY5NjIzIDU0LjkzMyw3LjY5NjIzIFpcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTEwXCIgbmctYXR0ci15PVwie3sgc2V0VGVtcFlQb3NpdGlvbiArIDUgfX1cIiBmb250LXNpemU9XCIyMFwiIG5nLWhpZGU9XCJhY3R1YWxUZW1wICYmIChzZXRUZW1wIDwgYWN0dWFsVGVtcClcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzZXRUZW1wIH19wrBDXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTEwXCIgbmctYXR0ci15PVwie3sgYWN0dWFsVGVtcFlQb3NpdGlvbiArIDUgfX1cIiBmb250LXNpemU9XCIyMFwiIG5nLXNob3c9XCJhY3R1YWxUZW1wXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgYWN0dWFsVGVtcCB9fcKwQ1xcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4nLFxuICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkaW9uaWNTY3JvbGxEZWxlZ2F0ZSl7XG4gICAgICAgICAgICAgICAgaWYoJHNjb3BlLnNob3dBY3R1YWw9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FjdHVhbCA9ICRzY29wZS5hY3R1YWxUZW1wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdG9wUG9zWTtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hpbmc9ZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWluVGVtcCA9IC0yMDtcbiAgICAgICAgICAgICAgICB2YXIgbWF4VGVtcCA9IDUwO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSAyNjA7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldFkgPSAxMDtcblxuICAgICAgICAgICAgICAgIHZhciB0ZW1wZXJhdHVyZVRvUG9zaXRpb25ZID0gZnVuY3Rpb24odGVtcGVyYXR1cmUpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgWVBvcyA9IGhlaWdodCAqICh0ZW1wZXJhdHVyZSAtIG1pblRlbXApIC8gKG1heFRlbXAgLSBtaW5UZW1wKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodCAtIFlQb3MgKyBvZmZzZXRZO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25ZVG9UZW1wZXJhdHVyZSA9IGZ1bmN0aW9uKFBvc1kpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IE1hdGgucm91bmQoKCgoaGVpZ2h0IC0gUG9zWSArIG9mZnNldFkpIC8gaGVpZ2h0KSAqIChtYXhUZW1wIC0gbWluVGVtcCkpICsgbWluVGVtcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRlbXAgPiBtYXhUZW1wKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSBtYXhUZW1wO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0ZW1wIDwgbWluVGVtcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gbWluVGVtcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcDtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9uVGFwID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9uVG91Y2goZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25SZWxlYXNlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9uVG91Y2ggPSBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoaW5nPXRydWU7XG4gICAgICAgICAgICAgICAgICAgICRpb25pY1Njcm9sbERlbGVnYXRlLmZyZWV6ZUFsbFNjcm9sbHModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9wUG9zWSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQub2Zmc2V0VG9wO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NZPWV2ZW50Lmdlc3R1cmUuc3JjRXZlbnQubGF5ZXJZLXRvcFBvc1k7XG4gICAgICAgICAgICAgICAgICAgIGlmKHBvc1k8MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NZICs9IGV2ZW50Lmdlc3R1cmUudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRUZW1wID0gcG9zaXRpb25ZVG9UZW1wZXJhdHVyZShwb3NZKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9uUmVsZWFzZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoaW5nPWZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkaW9uaWNTY3JvbGxEZWxlZ2F0ZS5mcmVlemVBbGxTY3JvbGxzKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRyYWcgPSBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRvdWNoaW5nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NZPWV2ZW50Lmdlc3R1cmUuc3JjRXZlbnQubGF5ZXJZLXRvcFBvc1k7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwb3NZPDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc1kgKz0gZXZlbnQuZ2VzdHVyZS50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0VGVtcCA9IHBvc2l0aW9uWVRvVGVtcGVyYXR1cmUocG9zWSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGRyYXdZUG9zaXRpb24gPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuc2hvd0FjdHVhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWN0dWFsVGVtcFlQb3NpdGlvbiA9IHRlbXBlcmF0dXJlVG9Qb3NpdGlvblkoJHNjb3BlLmFjdHVhbFRlbXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRUZW1wWVBvc2l0aW9uID0gdGVtcGVyYXR1cmVUb1Bvc2l0aW9uWSgkc2NvcGUuc2V0VGVtcCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGRyYXdZUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ2FjdHVhbFRlbXAnLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdZUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ3NldFRlbXAnLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdZUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUb3VjaFdpZGdldHMuZGlyZWN0aXZlcy50aW1lUGlja2VyJywgW10pXG5cbiAgLmRpcmVjdGl2ZSgndGltZVBpY2tlcicsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxuICAgICAgc2NvcGU6IHsgZnJvbTogJz0nLCB0bzogJz0nIH0sXG4gICAgICB0ZW1wbGF0ZTonPGRpdiBzdHlsZT1cIm1hcmdpbjogYXV0bzsgaGVpZ2h0OiAyNTBweDsgd2lkdGg6IDM1MHB4O1wiIG9uLWRyYWctc3RhcnQ9XCJvblRvdWNoKCRldmVudClcIiBvbi1kcmFnLWVuZD1cIm9uUmVsZWFzZSgpXCIgb24tZHJhZz1cImRyYWcoJGV2ZW50KVwiPlxcXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgaWQ9XCJ0aW1lLXBpY2tlclwiIGhlaWdodD1cIjI1MFwiIHdpZHRoPVwiMzUwXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbHRlciBpZD1cInNoYWRvdy17eyRpZH19XCIgeD1cIi0yMDAlXCIgeT1cIi0yMDAlXCIgd2lkdGg9XCI0NTAlXCIgaGVpZ2h0PVwiNDUwJVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZU9mZnNldCByZXN1bHQ9XCJvZmZPdXRcIiBpbj1cIlNvdXJjZUdyYXBoaWNcIiBkeD1cIjBcIiBkeT1cIjJcIj48L2ZlT2Zmc2V0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmZUNvbG9yTWF0cml4IHJlc3VsdD1cIm1hdHJpeE91dFwiIGluPVwib2ZmT3V0XCIgdHlwZT1cIm1hdHJpeFwiIHZhbHVlcz1cIjAuNCAwIDAgMCAwIDAgMC40IDAgMCAwIDAgMCAwLjQgMCAwIDAgMCAwIDEgMFwiPjwvZmVDb2xvck1hdHJpeD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwibWF0cml4T3V0XCIgc3RkRGV2aWF0aW9uPVwiMlwiPjwvZmVHYXVzc2lhbkJsdXI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZlQmxlbmQgaW49XCJTb3VyY2VHcmFwaGljXCIgaW4yPVwiYmx1ck91dFwiIG1vZGU9XCJub3JtYWxcIj48L2ZlQmxlbmQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpbHRlcj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8Zz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIxNzVcIiBjeT1cIjEyNVwiIHI9XCIxMDBcIiBmaWxsPVwid2hpdGVcIj48L2NpcmNsZT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gMTc1IDI1IEEgMTAwIDEwMCAwIDAgMSAyMjUgMzhMIDE3NSAxMjVcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwiI2VlZVwiIGQ9XCJNIDI2MSA3NSBBIDEwMCAxMDAgMCAwIDEgMjc1IDEyNUwgMTc1IDEyNVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gMjYxIDE3NSBBIDEwMCAxMDAgMCAwIDEgMjI1IDIxMUwgMTc1IDEyNVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gMTc1IDIyNSBBIDEwMCAxMDAgMCAwIDEgMTI1IDIxMUwgMTc1IDEyNVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gODggMTc1IEEgMTAwIDEwMCAwIDAgMSA3NSAxMjVMIDE3NSAxMjVcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwiI2VlZVwiIGQ9XCJNIDg4IDc0IEEgMTAwIDEwMCAwIDAgMSAxMjQgMzhMIDE3NSAxMjVcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGc+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiMTc1XCIgY3k9XCIxMjVcIiByPVwiNzBcIiBmaWxsPVwid2hpdGVcIj48L2NpcmNsZT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gMjEwIDY0IEEgNzAgNzAgMCAwIDEgMjM1IDkwTCAxNzUgMTI1XCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiNlZWVcIiBkPVwiTSAyNDUgMTI1IEEgNzAgNzAgMCAwIDEgMjM1IDE2MEwgMTc1IDEyNVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZWVlXCIgZD1cIk0gMjEwIDE4NSBBIDcwIDcwIDAgMCAxIDE3NSAxOTVMIDE3NSAxMjVcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwiI2VlZVwiIGQ9XCJNIDE0MCAxODUgQSA3MCA3MCAwIDAgMSAxMTQgMTYwTCAxNzUgMTI1XCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiNlZWVcIiBkPVwiTSAxMDUgMTI1IEEgNzAgNzAgMCAwIDEgMTE0IDkwTCAxNzUgMTI1XCI+PC9wYXRoPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiNlZWVcIiBkPVwiTSAxMzkgNjQgQSA3MCA3MCAwIDAgMSAxNzUgNTVMIDE3NSAxMjVcIj48L3BhdGg+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xhc3M9XCJjb250ZW50LXNlbGVjdGlvblwiIG5nLWF0dHItZD1cInt7IHNlbWlDaXJjbGUgfX1cIiBmaWx0ZXI9XCJ1cmwoI3NoYWRvdy17eyRpZH19KVwiPjwvcGF0aD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBpZD1cInRlc3RcIiBjeD1cIjE3NVwiIGN5PVwiMTI1XCIgcj1cIjEwMFwiIHN0cm9rZT1cImJsYWNrXCIgZmlsbD1cInRyYW5zcGFyZW50XCIgc3Ryb2tlLXdpZHRoPVwiNlwiIGZpbHRlcj1cInVybCgjc2hhZG93LXt7JGlkfX0pXCI+PC9jaXJjbGU+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCIjNTU1XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTY3XCIgeT1cIjQ3XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMDBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIyMTBcIiB5PVwiNTdcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxM1xcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjI0MlwiIHk9XCI4OFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE0XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjUyXCIgeT1cIjEyOVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE1XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjQxXCIgeT1cIjE3MVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE2XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjEwXCIgeT1cIjIwM1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE3XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTY4XCIgeT1cIjIxNVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE4XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTI4XCIgeT1cIjIwM1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiOTZcIiB5PVwiMTcxXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCI4NVwiIHk9XCIxMjlcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMVxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjk1XCIgeT1cIjg4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjJcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIxMjVcIiB5PVwiNTdcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyM1xcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2c+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCIjNTU1XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTY4XCIgeT1cIjcyXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTJcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIxOTlcIiB5PVwiODBcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjIxXCIgeT1cIjEwMFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDJcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIyMjhcIiB5PVwiMTI5XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgM1xcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjIyMVwiIHk9XCIxNTlcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMjAwXCIgeT1cIjE4MVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDVcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIxNzFcIiB5PVwiMTg5XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjE0MlwiIHk9XCIxODFcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA3XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCB4PVwiMTIxXCIgeT1cIjE1OFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDhcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IHg9XCIxMTJcIiB5PVwiMTI5XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOVxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjExOVwiIHk9XCIxMDFcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgeD1cIjEzN1wiIHk9XCI4MVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgbmctYXR0ci14PVwie3tmcm9tUG9zLngtMjB9fVwiIG5nLWF0dHIteT1cInt7ZnJvbVBvcy55Kzl9fVwiIGZvbnQtc2l6ZT1cIjIwXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBmcm9tIH19XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgbmctYXR0ci14PVwie3t0b1Bvcy54LTIwfX1cIiBuZy1hdHRyLXk9XCJ7e3RvUG9zLnkrOX19XCIgZm9udC1zaXplPVwiMjBcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHRvIH19XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cXFxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXFxuICAgICAgICAgICAgICAgIDwvZGl2PicsXG4gICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRpb25pY1Njcm9sbERlbGVnYXRlKXtcblxuICAgICAgICB2YXIgYmFzZVRpbWU7XG4gICAgICAgIHZhciBjZW50ZXJQb3M7XG4gICAgICAgIHZhciBsYXN0QW5nbGU7XG4gICAgICAgIHZhciBsYXN0SW52ZXJ0ZWQ7XG4gICAgICAgIHZhciB0b3VjaGluZz1mYWxzZTtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG5cbiAgICAgICAgdmFyIGRyYXdSYW5nZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgdmFyIHBhcnNlZEZyb20gPSBwYXJzZVRpbWUoJHNjb3BlLmZyb20pO1xuICAgICAgICAgIHZhciBwYXJzZWRUbyA9IHBhcnNlVGltZSgkc2NvcGUudG8pO1xuICAgICAgICAgIHZhciBmcm9tQW5nbGU9LTkwKyhwYXJzZWRGcm9tLmhvdXJzKjMwK3BhcnNlZEZyb20ubWludXRlcyowLjUpO1xuICAgICAgICAgIHZhciB0b0FuZ2xlPS05MCsocGFyc2VkVG8uaG91cnMqMzArcGFyc2VkVG8ubWludXRlcyowLjUpO1xuICAgICAgICAgICRzY29wZS5zZW1pQ2lyY2xlID0gcmVndWxhclNlbWlDaXJjbGUoMTc1LDEyNSwxMDAsZnJvbUFuZ2xlLHRvQW5nbGUsZmFsc2UpO1xuICAgICAgICAgICRzY29wZS5mcm9tUG9zID0gcG9zaXRpb25PbkNpcmNsZSgxNzUsMTI1LDEwMCxmcm9tQW5nbGUsNDAsMTQpO1xuICAgICAgICAgICRzY29wZS50b1BvcyA9IHBvc2l0aW9uT25DaXJjbGUoMTc1LDEyNSwxMDAsdG9BbmdsZSw0MCwxNCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdyZWF0ZXJPckVxdWlhbFRpbWUgPSBmdW5jdGlvbiAodGltZTEsIHRpbWUyKXtcbiAgICAgICAgICB2YXIgcGFyc2VkVGltZTE9cGFyc2VUaW1lKHRpbWUxKTtcbiAgICAgICAgICB2YXIgcGFyc2VkVGltZTI9cGFyc2VUaW1lKHRpbWUyKTtcbiAgICAgICAgICByZXR1cm4gKHBhcnNlZFRpbWUxLmhvdXJzPnBhcnNlZFRpbWUyLmhvdXJzKSB8fCAoKHBhcnNlZFRpbWUxLmhvdXJzPT1wYXJzZWRUaW1lMi5ob3VycykgJiYgKHBhcnNlZFRpbWUxLm1pbnV0ZXM+PXBhcnNlZFRpbWUyLm1pbnV0ZXMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ3JlYXRlclRpbWUgPSBmdW5jdGlvbiAodGltZTEsIHRpbWUyKXtcbiAgICAgICAgICB2YXIgcGFyc2VkVGltZTE9cGFyc2VUaW1lKHRpbWUxKTtcbiAgICAgICAgICB2YXIgcGFyc2VkVGltZTI9cGFyc2VUaW1lKHRpbWUyKTtcbiAgICAgICAgICByZXR1cm4gKHBhcnNlZFRpbWUxLmhvdXJzPnBhcnNlZFRpbWUyLmhvdXJzKSB8fCAoKHBhcnNlZFRpbWUxLmhvdXJzPT1wYXJzZWRUaW1lMi5ob3VycykgJiYgKHBhcnNlZFRpbWUxLm1pbnV0ZXM+cGFyc2VkVGltZTIubWludXRlcykpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5vblRvdWNoID0gZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgIHRvdWNoaW5nPXRydWU7XG4gICAgICAgICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUuZnJlZXplQWxsU2Nyb2xscyh0cnVlKTtcblxuICAgICAgICAgIHZhciBmaXJzdFRvdWNoPXt4OiBldmVudC5nZXN0dXJlLnNyY0V2ZW50LmxheWVyWCwgeTogZXZlbnQuZ2VzdHVyZS5zcmNFdmVudC5sYXllcll9O1xuICAgICAgICAgIGlmKGZpcnN0VG91Y2gueTwwKXtcbiAgICAgICAgICAgIGZpcnN0VG91Y2gueCArPSBldmVudC5nZXN0dXJlLnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgICAgIGZpcnN0VG91Y2gueSArPSBldmVudC5nZXN0dXJlLnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2VudGVyUG9zPXt4OiBldmVudC5jdXJyZW50VGFyZ2V0Lm9mZnNldExlZnQrMTc1LCB5OiBldmVudC5jdXJyZW50VGFyZ2V0Lm9mZnNldFRvcCsxMjV9O1xuXG4gICAgICAgICAgYmFzZVRpbWU9Z2V0TW9kdWxlKGNlbnRlclBvcy54LCBjZW50ZXJQb3MueSwgZmlyc3RUb3VjaC54LCBmaXJzdFRvdWNoLnkpPDcwID8gMCA6IDEyO1xuXG4gICAgICAgICAgbGFzdEFuZ2xlPWdldEFuZ2xlKGNlbnRlclBvcy54LCBjZW50ZXJQb3MueSwgZmlyc3RUb3VjaC54LCBmaXJzdFRvdWNoLnkpO1xuICAgICAgICAgICRzY29wZS5mcm9tPSBcIlwiKyhwYXJzZUludChsYXN0QW5nbGUvMzApK2Jhc2VUaW1lKSsnOicrKChsYXN0QW5nbGUlMzApPDE1ID8gJzAwJzonMzAnKTtcbiAgICAgICAgICAkc2NvcGUudG89ICRzY29wZS5mcm9tO1xuICAgICAgICAgIGxhc3RJbnZlcnRlZD1mYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUub25SZWxlYXNlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICB0b3VjaGluZz1mYWxzZTtcbiAgICAgICAgICAkaW9uaWNTY3JvbGxEZWxlZ2F0ZS5mcmVlemVBbGxTY3JvbGxzKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZHJhZyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICBpZih0b3VjaGluZyl7XG4gICAgICAgICAgICB2YXIgbGFzdFRvdWNoPXt4OiBldmVudC5nZXN0dXJlLnNyY0V2ZW50LmxheWVyWCwgeTogZXZlbnQuZ2VzdHVyZS5zcmNFdmVudC5sYXllcll9O1xuICAgICAgICAgICAgaWYobGFzdFRvdWNoLnk8MCl7XG4gICAgICAgICAgICAgIGxhc3RUb3VjaC54ICs9IGV2ZW50Lmdlc3R1cmUudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICAgICAgICBsYXN0VG91Y2gueSArPSBldmVudC5nZXN0dXJlLnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGFuZ2xlPWdldEFuZ2xlKGNlbnRlclBvcy54LCBjZW50ZXJQb3MueSwgbGFzdFRvdWNoLngsIGxhc3RUb3VjaC55KTtcbiAgICAgICAgICAgIGlmKChsYXN0QW5nbGU+MjcwICYmIGFuZ2xlPDkwKSB8fCAoYW5nbGU+MjcwICYmIGxhc3RBbmdsZTw5MCkpe1xuICAgICAgICAgICAgICBiYXNlVGltZSA9IGJhc2VUaW1lPT09MCA/IDEyIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RBbmdsZSA9IGFuZ2xlO1xuICAgICAgICAgICAgdmFyIHRpbWU9IFwiXCIrKHBhcnNlSW50KGxhc3RBbmdsZS8zMCkrYmFzZVRpbWUpKyc6JysoKGxhc3RBbmdsZSUzMCk8MTUgPyAnMDAnOiczMCcpO1xuICAgICAgICAgICAgdmFyIGludmVydGVkO1xuICAgICAgICAgICAgaWYobGFzdEludmVydGVkKXtcbiAgICAgICAgICAgICAgaW52ZXJ0ZWQgPSAhZ3JlYXRlclRpbWUodGltZSwkc2NvcGUudG8pO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIGludmVydGVkID0gIWdyZWF0ZXJPckVxdWlhbFRpbWUodGltZSwkc2NvcGUuZnJvbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihpbnZlcnRlZCl7XG4gICAgICAgICAgICAgICRzY29wZS5mcm9tPXRpbWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgJHNjb3BlLnRvPXRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0SW52ZXJ0ZWQgPSBpbnZlcnRlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnZnJvbScsZnVuY3Rpb24oKXtcbiAgICAgICAgICBkcmF3UmFuZ2UoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgndG8nLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZHJhd1JhbmdlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRyYXdSYW5nZSgpO1xuXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=